<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="CubicSpline" Id="{c855b65d-af6d-40cf-8f6f-e563fd78b196}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CubicSpline//参考《数值分析》第4版李庆扬等编，p36三转角方程
VAR_INPUT
	x : ARRAY[0..4] OF LREAL;
	y : ARRAY[0..4] OF LREAL;
	dy0 : LREAL;
	dy4 : LREAL;
	xt: LREAL;
END_VAR
VAR_OUTPUT
	yt: LREAL;
	vt: LREAL;
END_VAR
VAR
	i : INT;
	h : ARRAY[0..3] OF LREAL;
	f : ARRAY[0..3] OF LREAL;
	lemda : ARRAY[0..3] OF LREAL;
	miu : ARRAY[0..3] OF LREAL;
	g : ARRAY[0..3] OF LREAL;

	//lftMat*lftVec=rghtVec，求lftVec
	lftMat : Mat3;
	lftVec : Vec3;
	rghtVec : Vec3;
	m: ARRAY[0..4] OF LREAL;
	alpha: ARRAY[0..4] OF LREAL;
	beta: ARRAY[0..4] OF LREAL;
	dAlpha: ARRAY[0..4] OF LREAL;
	dBeta: ARRAY[0..4] OF LREAL;
	tmp: LREAL;
	tmpd: LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[FOR i:=0 TO 3 DO
	h[i] := x[i+1] - x[i];
	f[i] := (y[i+1] - y[i]) / h[i];
END_FOR

FOR i:=1 TO 3 DO
	lemda[i] := h[i] / (h[i-1] + h[i]);
	miu[i] := h[i-1] / (h[i-1] + h[i]);
	g[i] := 3 * (lemda[i] * f[i-1] + miu[i] * f[i]);
END_FOR

//才3*3，直接求逆，更大的矩阵用追赶法
lftMat := SetMat3(2,miu[1],0, lemda[2],2,miu[2], 0,lemda[3],2);
rghtVec := SetVec3(g[1]-lemda[1]*dy0, g[2], g[3]-miu[3]*dy4);
lftVec := MatMulVec(Inv3(lftMat), rghtVec);
m[0] := dy0;
FOR i:=0 TO 2 DO
	m[i+1] := lftVec.data[i];
END_FOR
m[4] := dy4;

//分段三次hermite插值
i:=0;
IF xt <= x[1] THEN//i=0
	tmp := (xt-x[i+1])/(x[i]-x[i+1]) * (xt-x[i+1])/(x[i]-x[i+1]);
	alpha[i] := tmp * (1+2*(xt-x[i])/(x[i+1]-x[i]));
	beta[i]  := tmp * (xt-x[i]);
	tmpd := (xt-x[i+1])/(x[i]-x[i+1])/(x[i]-x[i+1]);
	dAlpha[i] := tmpd * 6*(xt-x[i])/(x[i+1]-x[i]);
	dBeta[i]  := tmpd * (2*(xt-x[i])+(xt-x[i+1]));
ELSE
	alpha[i] := 0;
	beta[i]  := 0;
	dAlpha[i]:= 0;
	dBeta[i] := 0;
END_IF
FOR i:=1 TO 3 DO
	IF xt >= x[i-1] AND xt <= x[i] THEN
		tmp := (xt-x[i-1])/(x[i]-x[i-1]) * (xt-x[i-1])/(x[i]-x[i-1]);
		alpha[i] := tmp * (1+2*(xt-x[i])/(x[i-1]-x[i]));
		beta[i]  := tmp * (xt-x[i]);
		tmpd := (xt-x[i-1])/(x[i]-x[i-1])/(x[i]-x[i-1]);
		dAlpha[i] := tmpd * 6*(xt-x[i])/(x[i-1]-x[i]);
		dBeta[i]  := tmpd * (2*(xt-x[i])+(xt-x[i-1]));
	ELSIF xt >= x[i] AND xt <= x[i+1] THEN
		tmp := (xt-x[i+1])/(x[i]-x[i+1]) * (xt-x[i+1])/(x[i]-x[i+1]);
		alpha[i] := tmp * (1+2*(xt-x[i])/(x[i+1]-x[i]));
		beta[i]  := tmp * (xt-x[i]);
		tmpd := (xt-x[i+1])/(x[i]-x[i+1])/(x[i]-x[i+1]);
		dAlpha[i] := tmpd * 6*(xt-x[i])/(x[i+1]-x[i]);
		dBeta[i]  := tmpd * (2*(xt-x[i])+(xt-x[i+1]));
	ELSE
		alpha[i] := 0;
		beta[i]  := 0;
		dAlpha[i]:= 0;
		dBeta[i] := 0;
	END_IF
END_FOR
i:=4;
IF xt >= x[3] THEN
	tmp := (xt-x[i-1])/(x[i]-x[i-1]) * (xt-x[i-1])/(x[i]-x[i-1]);
	alpha[i] := tmp * (1+2*(xt-x[i])/(x[i-1]-x[i]));
	beta[i]  := tmp * (xt-x[i]);
	tmpd := (xt-x[i-1])/(x[i]-x[i-1])/(x[i]-x[i-1]);
	dAlpha[i] := tmpd * 6*(xt-x[i])/(x[i-1]-x[i]);
	dBeta[i]  := tmpd * (2*(xt-x[i])+(xt-x[i-1]));
ELSE
	alpha[i] := 0;
	beta[i]  := 0;
	dAlpha[i]:= 0;
	dBeta[i] := 0;
END_IF

yt:=0;
vt:=0;
FOR i:=0 TO 4 DO
	yt := yt + y[i]*alpha[i] + m[i]*beta[i];
	vt := vt + y[i]*dAlpha[i] + m[i]*dBeta[i];
END_FOR]]></ST>
    </Implementation>
    <LineIds Name="CubicSpline">
      <LineId Id="9" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="27" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="67" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="93" Count="2" />
      <LineId Id="97" Count="2" />
      <LineId Id="134" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="135" Count="1" />
      <LineId Id="110" Count="0" />
      <LineId Id="177" Count="2" />
      <LineId Id="108" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="180" Count="1" />
      <LineId Id="107" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="114" Count="3" />
      <LineId Id="186" Count="1" />
      <LineId Id="185" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="124" Count="1" />
      <LineId Id="119" Count="0" />
      <LineId Id="183" Count="1" />
      <LineId Id="182" Count="0" />
      <LineId Id="121" Count="2" />
      <LineId Id="188" Count="1" />
      <LineId Id="103" Count="1" />
      <LineId Id="137" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="138" Count="1" />
      <LineId Id="129" Count="0" />
      <LineId Id="191" Count="1" />
      <LineId Id="190" Count="0" />
      <LineId Id="130" Count="2" />
      <LineId Id="193" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="144" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>