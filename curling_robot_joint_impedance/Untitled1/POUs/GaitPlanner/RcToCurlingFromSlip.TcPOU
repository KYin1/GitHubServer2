<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="RcToCurlingFromSlip" Id="{76f3faa8-342b-45b3-bff4-eed02177ddf5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RcToCurlingFromSlip
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
//*********************************common state start*********************************************	
	gait_cycle : UDINT := 0;
	quit_flag : BOOL := FALSE;
	delta_t:LREAL:=0.001;//sampling period
	isFinished:BOOL:=FALSE;
	// robot geometrical parameters
	hip_pos : ARRAY[0..5, 0..2] OF LREAL := [-0.369,  -0.125, 0,
                                             0,  -0.28, 0,
                                             0.36, -0.125, 0,
                                             0.36, 0.125, 0,
											 0,0.28,0,
											 -0.369,0.125,0];

	leg_index_mapping : ARRAY[0..5] OF INT := [1, 2, 3, 4,5,6];
	Rleg : ARRAY[0..5] OF Mat3;
	
	joint_ref_pos_init : ARRAY[0..5] OF Vec3;
	jointPosLast   : ARRAY[0..5, 0..2] OF LREAL; 
	
	body_ref_pos_init : Vec3;
	body_ref_ang_init : Vec3;
    leg_ref_pos_init : ARRAY[0..5] OF Vec3;
	leg_ref_pos_init_wrt_hip : ARRAY[0..5] OF Vec3;
	
	body_ref_pos_enter : Vec3;
	body_ref_ang_enter : Vec3;
    leg_ref_pos_enter : ARRAY[0..5] OF Vec3;
	
	body_ref_pos : Vec3;
	body_ref_ang : Vec3;
    leg_ref_pos : ARRAY[0..5] OF Vec3;
	leg_ref_pos_wrt_hip : ARRAY[0..5] OF Vec3;
	
	body_ref_pos_next : Vec3;
	body_ref_ang_next : Vec3;
    leg_ref_pos_next : ARRAY[0..5] OF Vec3;
	leg_ref_pos_next_wrt_hip : ARRAY[0..5] OF Vec3;
	leg_ref_vel_next_wrt_hip : ARRAY[0..5] OF Vec3;
	
	// output test
	joint_ref_pos   : ARRAY[0..5] OF Vec3;
	joint_ref_vel   : ARRAY[0..5] OF Vec3;
	
	jointPosTarget  : ARRAY[0..5, 0..2] OF LREAL; 
	jointVelTarget  : ARRAY[0..5, 0..2] OF LREAL;  
	jointFceTarget  : ARRAY[0..5, 0..2] OF LREAL;  
	
	pvt, pvtDot : LREAL;
	
	fbRotmat : RotM;
	fbGetPivot  : GetPivot;
	fbCubicSpline:CubicSpline;
	
	Mapping05:ARRAY[0..1] OF INT:=[0,5];
	Mapping14:ARRAY[0..1] OF INT:=[1,4];
	Mapping23:ARRAY[0..1] OF INT:=[2,3];
//*********************************common state end*********************************************

//*********************************exclusive state start****************************************
	BJntStart:ARRAY[0..1] OF vec3;
	BPosWrtHip:ARRAY[0..1] OF vec3;
	BJntRef:ARRAY[0..1] OF vec3;
	
	BJntRetract:ARRAY[0..1,0..2] OF LREAL;
	BJntExtend:ARRAY[0..1,0..2] OF LREAL;	
	BlegCenterType:UINT:=0;//0 is double pedals, 1 is single pedals
	BPosExtendRefDouble:ARRAY[0..1,0..2] OF LREAL:=[-0.15,-0.1687,0,
                                                     -0.15,-0.1687,0];
	BPosExtendRefSingle:ARRAY[0..1,0..2] OF LREAL:=[-0.15,-0.1687,-0.05,
                                                     -0.15,-0.1687,0.05];	
	BPosExtractRef:ARRAY[0..1,0..2]      OF LREAL:=[-0.15,-0.1687+0.08,-0.05,
                                                     -0.15,-0.1687+0.08,0.05];
												 
	BJntRetractRef:ARRAY[0..1,0..2] OF LREAL:=[0*pi/180,130.6330*pi/180,290.5615*pi/180,
                                            0*pi/180,130.6330*pi/180,290.5615*pi/180];
								   

	FJntStart:ARRAY[0..1] OF vec3;
	FPosWrtHip:ARRAY[0..1] OF vec3;
	FJntRef:ARRAY[0..1] OF vec3;	
	FJntGrip:ARRAY[0..1,0..2] OF LREAL:=[-90*pi/180,(522-360)*pi/180,(-188+360)*pi/180,
                                        90*pi/180,(522-360)*pi/180,(-188+360)*pi/180];		
	MJntStart:ARRAY[0..1] OF vec3;
	MPosWrtHip:ARRAY[0..1] OF vec3;
	MJntRef:ARRAY[0..1] OF vec3;	
	MJntLiftTarget:ARRAY[0..1,0..2] OF LREAL;
	MPosLiftTarget:ARRAY[0..1,0..2] OF LREAL:=[-0.0141,-0.1797+0.05,-0.1246,
                                               -0.0141,-0.1797+0.05,0.1246];	
	MJntLiftTargetRef:ARRAY[0..1,0..2] OF LREAL:=[0,331.45*pi/180,-149*pi/180,
                                               0,331.45*pi/180,-149*pi/180];	
	BRetractTime:LREAL:=2;
	BExtendTime:LREAL:=2;
	FGripTime:LREAL:=2;		
	MLiftTime:LREAL:=2;	
	
	isBMove: BOOL:=FALSE;	
	isMMove: BOOL:=FALSE;	
	isFMove: BOOL:=FALSE;	
	enterMMoveCount:UDINT;	
	enterFMoveCount:UDINT;			
//*********************************exclusive state end****************************************
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="DoPlanning" Id="{4a53a596-d21b-49a3-b69c-7242020c41b4}">
      <Declaration><![CDATA[METHOD PUBLIC DoPlanning : BOOL
VAR_INPUT
	count : UDINT;
END_VAR
VAR
	i, j  : INT;
	tempLeg:ARRAY [0..2] OF LREAL;
	tempJnt:ARRAY [0..2] OF LREAL;
	tempRef:ARRAY [0..2] OF LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF count = 0 THEN
	isFinished := FALSE;
	Initialize();
	IF BlegCenterType=0 THEN
		FOR i:=0 TO 1 DO
			tempLeg[0]:=BPosExtendRefDouble[i,0];tempLeg[1]:=BPosExtendRefDouble[i,1];tempLeg[2]:=BPosExtendRefDouble[i,2];
			tempRef[0]:=BJntRetractRef[i,0];tempRef[1]:=BJntRetractRef[i,1];tempRef[2]:=BJntRetractRef[i,2];
			GVL.legCtrl[Mapping05[i]].InverseKinetics(tipPosition:=tempLeg , refPosLast:=tempRef , legIndex:=Mapping05[i] , motorAngles=>tempJnt , isSingular=> );
			BJntExtend[i,0]:=tempJnt[0];BJntExtend[i,1]:=tempJnt[1];BJntExtend[i,2]:=tempJnt[2];
		END_FOR		
	ELSE
		FOR i:=0 TO 1 DO
			tempLeg[0]:=BPosExtendRefSingle[i,0];tempLeg[1]:=BPosExtendRefSingle[i,1];tempLeg[2]:=BPosExtendRefSingle[i,2];
			tempRef[0]:=BJntRetractRef[i,0];tempRef[1]:=BJntRetractRef[i,1];tempRef[2]:=BJntRetractRef[i,2];
			GVL.legCtrl[Mapping05[i]].InverseKinetics(tipPosition:=tempLeg , refPosLast:=tempRef , legIndex:=Mapping05[i] , motorAngles=>tempJnt , isSingular=> );
			BJntExtend[i,0]:=tempJnt[0];BJntExtend[i,1]:=tempJnt[1];BJntExtend[i,2]:=tempJnt[2];	
		END_FOR		
	END_IF
	FOR i:=0 TO 1 DO
		tempLeg[0]:=BPosExtractRef[i,0];tempLeg[1]:=BPosExtractRef[i,1];tempLeg[2]:=BPosExtractRef[i,2];
		tempRef[0]:=BJntRetractRef[i,0];tempRef[1]:=BJntRetractRef[i,1];tempRef[2]:=BJntRetractRef[i,2];
		GVL.legCtrl[Mapping05[i]].InverseKinetics(tipPosition:=tempLeg , refPosLast:=tempRef , legIndex:=Mapping05[i] , motorAngles=>tempJnt , isSingular=> );
		BJntRetract[i,0]:=tempJnt[0];BJntRetract[i,1]:=tempJnt[1];BJntRetract[i,2]:=tempJnt[2];
	END_FOR

	FOR i:=0 TO 1 DO
		tempLeg[0]:=MPosLiftTarget[i,0];tempLeg[1]:=MPosLiftTarget[i,1];tempLeg[2]:=MPosLiftTarget[i,2];
		tempRef[0]:=MJntLiftTargetRef[i,0];tempRef[1]:=MJntLiftTargetRef[i,1];tempRef[2]:=MJntLiftTargetRef[i,2];
		GVL.legCtrl[Mapping14[i]].InverseKinetics(tipPosition:=tempLeg , refPosLast:=tempRef , legIndex:=Mapping14[i] , motorAngles=>tempJnt , isSingular=> );
		MJntLiftTarget[i,0]:=tempJnt[0];MJntLiftTarget[i,1]:=tempJnt[1];MJntLiftTarget[i,2]:=tempJnt[2];
	END_FOR		
	
END_IF

TrjPlanning();

IF quit_flag THEN
	isFinished := TRUE;
	quit_flag := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{99feb548-dc71-4de7-ae92-ba6433a32501}">
      <Declaration><![CDATA[METHOD PUBLIC Initialize : BOOL
VAR_INPUT
END_VAR
VAR
	i, j : INT;
	sum_height : LREAL := 0;
	leg_pos    : ARRAY[0..2] OF LREAL;
	
	Rb : Mat3;
	hip_pos_j  : Vec3;
	leg_pos_wrt_com : Vec3;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Rleg[0]:=SetMat3(1,0,0,0,0,-1,0,1,0);
Rleg[1]:=SetMat3(-1,0,0,0,0,1,0,1,0,);
Rleg[2]:=SetMat3(-1,0,0,0,0,1,0,1,0);
Rleg[3]:=SetMat3(-1,0,0,0,0,1,0,1,0);
Rleg[4]:=SetMat3( -1,0,0,0,0,1,0,1,0);
Rleg[5]:=SetMat3(1,0,0,0,0,-1,0,1,0);

quit_flag  := FALSE;
gait_cycle := 0;
isBMove:=TRUE;
isMMove:=FALSE;
delta_t:=1.0/gvl.sampleRate;

FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		IF ABS(gvl.jntLastRefPos[i, j] - gvl.jntActualPos[i, j]) < 0.2 THEN
			joint_ref_pos_init[i].data[j] := gvl.jntLastRefPos[i, j];
		ELSE
			joint_ref_pos_init[i].data[j] := gvl.jntActualPos[i, j];
		END_IF
		jointPosLast[i,j]:=joint_ref_pos_init[i].data[j];
	END_FOR
END_FOR

sum_height := 0;
FOR j := 0 TO 5 DO
	// FK
	gvl.legCtrl[j].ForwardKinetics(motorAngles := joint_ref_pos_init[j].data, legIndex:=j, tipPosition => leg_pos);
	leg_ref_pos_init_wrt_hip[j] := SetVec3(leg_pos[0], leg_pos[1], leg_pos[2]);
	sum_height := sum_height - leg_ref_pos_init_wrt_hip[j].data[1];
END_FOR
body_ref_pos_init := SetVec3(0, 0, sum_height/6.0);
body_ref_ang_init := SetVec3(0, 0, 0);                            

FOR j := 0 TO 5 DO
	fbRotMat(yaw := body_ref_ang_init.data[2],
             pitch := body_ref_ang_init.data[1],
             roll := body_ref_ang_init.data[0],
             rm => Rb );
	hip_pos_j := SetVec3(hip_pos[j, 0], hip_pos[j, 1], hip_pos[j, 2]);
	leg_pos_wrt_com := VecAdd(MatMulVec(Rleg[j], leg_ref_pos_init_wrt_hip[j]), hip_pos_j);
    leg_ref_pos_init[j] := VecAdd(body_ref_pos_init, MatMulVec(Rb, leg_pos_wrt_com));
END_FOR

body_ref_pos := body_ref_pos_init;
body_ref_ang := body_ref_ang_init;
leg_ref_pos := leg_ref_pos_init;
leg_ref_pos_wrt_hip := leg_ref_pos_init_wrt_hip;

body_ref_pos_enter := body_ref_pos_init;
body_ref_ang_enter := body_ref_ang_init;
leg_ref_pos_enter := leg_ref_pos_init;

FOR i:=0 TO 1 DO
	FOR j:=0 TO 2 DO
		BJntStart[i].data[j]:=joint_ref_pos_init[Mapping05[i]].data[j];
		MJntStart[i].data[j]:=joint_ref_pos_init[Mapping14[i]].data[j];
		FJntStart[i].data[j]:=joint_ref_pos_init[Mapping23[i]].data[j];
	END_FOR
END_FOR

FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		jointPosTarget[i, j] := joint_ref_pos_init[i].data[j];
		jointVelTarget[i, j] := 0;
		jointFceTarget[i, j] := 0;
	END_FOR
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrjPlanning" Id="{11b836cd-ee10-4be4-b288-eb2ec5416c34}">
      <Declaration><![CDATA[METHOD PUBLIC TrjPlanning : BOOL
VAR_INPUT
END_VAR

VAR
	tr: lreal;
	i: INT;
	j: INT;
	Rb_target1: Mat3;
	temp: vec3;
	
	Rb: Mat3;
	hip_pos_j: Vec3;
	leg_ref_pos_wrt_com_j: Vec3;
	tmp: Vec3;
	tip_pos: Vec3;
	tip_vel: Vec3;
	jointTmpPosLast: ARRAY [0..2] OF LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[gait_cycle := gait_cycle + 1;

IF gait_cycle=(BRetractTime+BExtendTime)*gvl.sampleRate OR (gait_cycle-enterMMoveCount) =MLiftTime*gvl.sampleRate OR (gait_cycle-enterFMoveCount)=FGripTime*gvl.sampleRate THEN
	leg_ref_pos_enter:=leg_ref_pos;
END_IF

IF isMMove=FALSE AND isFMove=FALSE THEN
IF isBMove=TRUE THEN
	body_ref_pos:=body_ref_pos_enter;
	body_ref_ang:=body_ref_ang_enter;
	leg_ref_pos:=leg_ref_pos_enter;
	IF gait_cycle<=BRetractTime*gvl.sampleRate  THEN
		tr  := UDINT_TO_LREAL(gait_cycle) / gvl.sampleRate /BRetractTime;
		fbGetPivot(tNow := tr, tTotal := 1.0, pivot => pvt);
		FOR i:=0 TO 1 DO
			FOR j:=0 TO 2 DO
				BJntRef[i].data[j]:=(1-pvt)*BJntStart[i].data[j]+pvt*(BJntRetract[i,j]);
			END_FOR
			gvl.legCtrl[Mapping05[i]].ForwardKinetics(motorAngles:=BJntRef[i].data , legIndex:=Mapping05[i] , tipPosition=>BPosWrtHip[i].data );
			fbRotMat(yaw := body_ref_ang_init.data[2], pitch := body_ref_ang_init.data[1],roll := body_ref_ang_init.data[0], rm =>  Rb_target1 );
			temp.data[0]:=hip_pos[Mapping05[i],0];temp.data[1]:=hip_pos[Mapping05[i],1];temp.data[2]:=hip_pos[Mapping05[i],2];
			leg_ref_pos[Mapping05[i]]:= VecAdd( MatMulVec(Rb_target1, VecAdd(temp,MatMulVec(Rleg[Mapping05[i]],BPosWrtHip[i]))),body_ref_pos);
		END_FOR
	ELSIF gait_cycle<=(BRetractTime+BExtendTime)*gvl.sampleRate THEN
		tr  := (UDINT_TO_LREAL(gait_cycle) / gvl.sampleRate- BRetractTime)/BExtendTime;
		fbGetPivot(tNow := tr, tTotal := 1.0, pivot => pvt);
		FOR i:=0 TO 1 DO
			FOR j:=0 TO 2 DO
				BJntRef[i].data[j]:=(1-pvt)*BJntRetract[i,j]+pvt*BJntExtend[i,j];
			END_FOR
			gvl.legCtrl[Mapping05[i]].ForwardKinetics(motorAngles:=BJntRef[i].data , legIndex:=Mapping05[i] , tipPosition=>BPosWrtHip[i].data );
			fbRotMat(yaw := body_ref_ang_init.data[2], pitch := body_ref_ang_init.data[1],roll := body_ref_ang_init.data[0], rm =>  Rb_target1 );
			temp.data[0]:=hip_pos[Mapping05[i],0];temp.data[1]:=hip_pos[Mapping05[i],1];temp.data[2]:=hip_pos[Mapping05[i],2];
			leg_ref_pos[Mapping05[i]]:= VecAdd( MatMulVec(Rb_target1, VecAdd(temp,MatMulVec(Rleg[Mapping05[i]],BPosWrtHip[i]))),body_ref_pos);
		END_FOR
	ELSE
		isBMove:=FALSE;
		isMMove:=TRUE;
		//leg_ref_pos_enter:=leg_ref_pos;
		enterMMoveCount:=gait_cycle;
	END_IF
END_IF
END_IF

IF isBMove=FALSE AND isFMove=FALSE THEN
IF isMMove=TRUE THEN
	body_ref_pos:=body_ref_pos_enter;
	body_ref_ang:=body_ref_ang_enter;
	leg_ref_pos:=leg_ref_pos_enter;
	IF (gait_cycle-enterMMoveCount) <=MLiftTime*gvl.sampleRate THEN
		tr  := UDINT_TO_LREAL(gait_cycle- enterMMoveCount) / gvl.sampleRate/MLiftTime;
		fbGetPivot(tNow := tr, tTotal := 1.0, pivot => pvt);
		FOR i:=0 TO 1 DO
			FOR j:=0 TO 2 DO	
				MJntRef[i].data[j]:=(1-pvt)*MJntStart[i].data[j]+pvt*(MJntLiftTarget[i,j]);
			END_FOR
			gvl.legCtrl[Mapping14[i]].ForwardKinetics(motorAngles:=MJntRef[i].data , legIndex:=Mapping14[i] , tipPosition=>MPosWrtHip[i].data );
			fbRotMat(yaw := body_ref_ang_init.data[2], pitch := body_ref_ang_init.data[1],roll := body_ref_ang_init.data[0], rm =>  Rb_target1 );
			temp.data[0]:=hip_pos[Mapping14[i],0];temp.data[1]:=hip_pos[Mapping14[i],1];temp.data[2]:=hip_pos[Mapping14[i],2];
			leg_ref_pos[Mapping14[i]]:= VecAdd( MatMulVec(Rb_target1, VecAdd(temp,MatMulVec(Rleg[Mapping14[i]],MPosWrtHip[i]))),body_ref_pos);
		END_FOR
	ELSE
		isMMove:=FALSE;
		isFMove:=TRUE;
		//leg_ref_pos_enter:=leg_ref_pos;
		enterFMoveCount:=gait_cycle;
	END_IF
END_IF
END_IF

IF isBMove=FALSE AND isMMove=FALSE THEN
IF isFMove=TRUE THEN
	body_ref_pos:=body_ref_pos_enter;
	body_ref_ang:=body_ref_ang_enter;
	leg_ref_pos:=leg_ref_pos_enter;
	IF (gait_cycle-enterFMoveCount) <=FGripTime*gvl.sampleRate THEN
		tr  := UDINT_TO_LREAL(gait_cycle- enterFMoveCount) / gvl.sampleRate/FGripTime;
		fbGetPivot(tNow := tr, tTotal := 1.0, pivot => pvt);
		FOR i:=0 TO 1 DO
			FOR j:=0 TO 2 DO	
				FJntRef[i].data[j]:=(1-pvt)*FJntStart[i].data[j]+pvt*(FJntGrip[i,j]);
			END_FOR
		gvl.legCtrl[Mapping23[i]].ForwardKinetics(motorAngles:=FJntRef[i].data , legIndex:=Mapping23[i] , tipPosition=>FPosWrtHip[i].data );
		fbRotMat(yaw := body_ref_ang_init.data[2], pitch := body_ref_ang_init.data[1],roll := body_ref_ang_init.data[0], rm =>  Rb_target1 );
		temp.data[0]:=hip_pos[Mapping23[i],0];temp.data[1]:=hip_pos[Mapping23[i],1];temp.data[2]:=hip_pos[Mapping23[i],2];
		leg_ref_pos[Mapping23[i]]:= VecAdd( MatMulVec(Rb_target1, VecAdd(temp,MatMulVec(Rleg[Mapping23[i]],FPosWrtHip[i]))),body_ref_pos);
		END_FOR
	ELSE
		isFMove:=FALSE;
		isFinished := TRUE;
		//leg_ref_pos_enter:=leg_ref_pos;
	END_IF
END_IF
END_IF

// transform TO leg local frame AND DO inverse kinematics
FOR j := 0 TO 5 DO
	fbRotMat(
    	yaw := body_ref_ang.data[2], 
		pitch := body_ref_ang.data[1], 
		roll := body_ref_ang.data[0], 
		rm => Rb);
	hip_pos_j := SetVec3(hip_pos[j, 0], hip_pos[j, 1], hip_pos[j, 2]);

	//leg_ref_pos_wrt_com = Rb' * (leg_ref_pos - body_ref_pos)
	leg_ref_pos_wrt_com_j := MatMulVec(
		                         MatTranspose(Rb),
								 VecAdd(
									 leg_ref_pos[j],
									 VecNeg(body_ref_pos)
                                 )
                             );
	// leg_ref_pos_wrt_hip = Rleg' * (leg_ref_pos_wrt_com_j - hip_pos)
	leg_ref_pos_next_wrt_hip[j] := MatMulVec(
		                               MatTranspose(Rleg[j]),
									   VecAdd(
										   leg_ref_pos_wrt_com_j,
										   VecNeg(hip_pos_j)
									   )
								   );
								   
	leg_ref_vel_next_wrt_hip[j] := VecMulNum(VecAdd(leg_ref_pos_next_wrt_hip[j], VecNeg(leg_ref_pos_wrt_hip[j])), DINT_TO_LREAL(gvl.sampleRate));
END_FOR


// mapping to actual joints
FOR j := 0 TO 5 DO
	tmp := leg_ref_pos_next_wrt_hip[leg_index_mapping[j]-1];
	tip_pos := SetVec3(tmp.data[0], tmp.data[1], tmp.data[2]);
	tmp := leg_ref_vel_next_wrt_hip[leg_index_mapping[j]-1];
	tip_vel := SetVec3(tmp.data[0], tmp.data[1], tmp.data[2]);
	FOR i:= 0 TO 2 DO
		jointTmpPosLast[i]:=jointPosLast[j,i];
	END_FOR		
	gvl.legCtrl[j].InversePosAndVel(
		tipPos := tip_pos.data, 
		tipVel := tip_vel.data, 
		refPosLast:=jointTmpPosLast,
		legIndex:=j,
		jntPos => joint_ref_pos[j].data, 
		jntVel => joint_ref_vel[j].data);
	
END_FOR

// link to physical outputs
FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		jointPosTarget[i, j] := joint_ref_pos[i].data[j];
		jointPosLast[i,j]:=jointPosTarget[i, j] ;
		jointVelTarget[i, j] := joint_ref_vel[i].data[j];
		jointFceTarget[i, j] := 0;
	END_FOR
END_FOR

// store refs for next loop
leg_ref_pos_wrt_hip := leg_ref_pos_next_wrt_hip;
		
	
	
	]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RcToCurlingFromSlip">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="RcToCurlingFromSlip.DoPlanning">
      <LineId Id="45" Count="2" />
      <LineId Id="70" Count="0" />
      <LineId Id="75" Count="4" />
      <LineId Id="71" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="80" Count="2" />
      <LineId Id="74" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="86" Count="4" />
      <LineId Id="85" Count="0" />
      <LineId Id="92" Count="5" />
      <LineId Id="91" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="50" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RcToCurlingFromSlip.Initialize">
      <LineId Id="123" Count="4" />
      <LineId Id="8" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="22" Count="7" />
      <LineId Id="141" Count="0" />
      <LineId Id="30" Count="21" />
      <LineId Id="88" Count="3" />
      <LineId Id="87" Count="0" />
      <LineId Id="165" Count="2" />
      <LineId Id="164" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="159" Count="1" />
      <LineId Id="196" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="64" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RcToCurlingFromSlip.TrjPlanning">
      <LineId Id="5" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="213" Count="1" />
      <LineId Id="123" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="23" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="45" Count="2" />
      <LineId Id="43" Count="0" />
      <LineId Id="49" Count="2" />
      <LineId Id="48" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="73" Count="1" />
      <LineId Id="72" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="66" Count="2" />
      <LineId Id="70" Count="1" />
      <LineId Id="75" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="126" Count="3" />
      <LineId Id="125" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="81" Count="3" />
      <LineId Id="80" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="99" Count="4" />
      <LineId Id="85" Count="0" />
      <LineId Id="87" Count="4" />
      <LineId Id="104" Count="1" />
      <LineId Id="233" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="131" Count="1" />
      <LineId Id="134" Count="58" />
      <LineId Id="130" Count="0" />
      <LineId Id="95" Count="3" />
    </LineIds>
  </POU>
</TcPlcObject>