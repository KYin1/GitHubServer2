<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="TrotWalk" Id="{c95d6036-3874-48bc-be3f-d46f79bc2c82}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TrotWalk
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	period:ARRAY [0..1] OF LREAL:=[1,1];//total time of swing and stance
	duty:ARRAY [0..1] OF LREAL:=[0.5,0.5];
	step_height:ARRAY [0..1] OF LREAL:=[0.08,0.08];
	step:ARRAY [0..2] OF LREAL:=[0.1,0.1,0.1];//velocity change step
	delta_t:LREAL:=0.001;//sampling period
	
	(*protect*)
	isFeed : BOOL;
	starveCount : DINT;
	
	// robot geometrical parameters
	hip_pos : ARRAY[0..5, 0..2] OF LREAL := [-0.369,  -0.125, 0,
                                             0,  -0.28, 0,
                                             0.36, -0.125, 0,
                                             0.36, 0.125, 0,
											 0,0.28,0,
											 -0.369,0.125,0];

	leg_index_mapping : ARRAY[0..5] OF INT := [1, 2, 3, 4,5,6];
	Rleg : ARRAY[0..5] OF Mat3;
	Rleg_hip_wrt_trj : ARRAY[0..5] OF Mat3;//髋关节坐标系相对TT轨迹生成坐标系的旋转矩阵，注：TT轨迹生成坐标方位和后腿重合，位置和各腿髋关节原点重合
	
	joint_ref_pos_init : ARRAY[0..5] OF Vec3;
	jointPosLast   : ARRAY[0..5, 0..2] OF LREAL; 
	
	body_ref_pos_init : Vec3;
	body_ref_ang_init : Vec3;
    leg_ref_pos_init : ARRAY[0..5] OF Vec3;
	leg_ref_pos_init_wrt_hip : ARRAY[0..5] OF Vec3;
	
	body_ref_pos : Vec3;
	body_ref_ang : Vec3;
    leg_ref_pos : ARRAY[0..5] OF Vec3;
	leg_ref_pos_wrt_hip : ARRAY[0..5] OF Vec3;
	
	body_ref_pos_next : Vec3;
	body_ref_ang_next : Vec3;
    leg_ref_pos_next : ARRAY[0..5] OF Vec3;
	leg_ref_pos_next_wrt_hip : ARRAY[0..5] OF Vec3;
	leg_ref_vel_next_wrt_hip : ARRAY[0..5] OF Vec3;
	
	// output test
	joint_ref_pos   : ARRAY[0..5] OF Vec3;
	joint_ref_vel   : ARRAY[0..5] OF Vec3;
	
	jointPosTarget  : ARRAY[0..5, 0..2] OF LREAL; 
	jointVelTarget  : ARRAY[0..5, 0..2] OF LREAL;  
	jointFceTarget  : ARRAY[0..5, 0..2] OF LREAL;  
	
	pvt, pvtDot : LREAL;
	
	fbRotmat : RotM;
	fbGetPivot  : GetPivot;
	fbCubicSpline:CubicSpline;
	
	//state
	stance:INT:=1;
	swing:INT:=0;
	ready:INT:=-1;
	init:INT:=-2;
	state:ARRAY[0..1] OF INT:=[-2,-2];
	state_last:ARRAY[0..1] OF INT:=[-1,-1];
	
	gait_cycle : UDINT := 0;
	gait_cycle_enter: array[0..1] of UDINT := [0,0];
	quit_flag : BOOL := FALSE;
	require_stop:BOOL:=FALSE;
	require_move_last:BOOL:=FALSE;
	require_move:BOOL:=FALSE;
	isFinished:BOOL:=FALSE;
	isTrotWalk:bool:=false;
	inTrot: ARRAY [0..1] OF BOOL:=[FALSE,FALSE];
	
	count_en_ST:ARRAY [0..1] OF UDINT:=[0,0];
	count_en_SW:ARRAY [0..1] OF UDINT:=[0,0];
	count_en_RD:ARRAY [0..1] OF UDINT:=[0,0];
	tip_pos_en_ST:ARRAY [0..5] OF vec3;
	tip_pos_en_SW:ARRAY [0..5] OF vec3;
	tip_pos_en_RD:ARRAY [0..5] OF vec3;
	tip_vel_en_ST:ARRAY [0..5] OF vec3;
	tip_vel_en_SW:ARRAY [0..5] OF vec3;
	tip_vel_en_RD:ARRAY [0..5] OF vec3;
	tip_pos_ref:ARRAY [0..5] OF vec3;
	tip_vel_ref:ARRAY [0..5] OF vec3;
	tip_pos_ref_last:ARRAY [0..5] OF vec3;
	
	trot_vel_desire:LREAL:=0;
	side_vel_desire:LREAL:=0;
	turn_rate_desire:LREAL:=0;
	
	trot_vel:ARRAY [0..1] OF LREAL:=[0,0];
	side_vel:ARRAY [0..1] OF LREAL:=[0,0];
	turn_rate:ARRAY [0..1] OF LREAL:=[0,0];
	
	trot_vel_now:ARRAY [0..1] OF LREAL:=[0,0];
	side_vel_now:ARRAY [0..1] OF LREAL:=[0,0];
	turn_vel_now:ARRAY [0..1] OF LREAL:=[0,0];
	
	SwingTrj_tn:ARRAY[0..4] OF LREAL:=[0,0.25,0.5,0.75,1];
	StanceTrj_tn:ARRAY[0..4] OF LREAL:=[0,0.25,0.5,0.75,1];
	ReadyTrj_tn:ARRAY[0..4] OF LREAL:=[0,0.25,0.5,0.75,1];
	
	(*normal_tip_pos_cart:ARRAY[0..5, 0..2] OF LREAL:=[-0.35,-0.3,0,
													 -0.1,-0.3209,0.1246,
													 0.3,-0.3209,0.1246,
													 0.3,-0.3209,-0.1246,
													 -0.1,-0.3209,-0.1246,
													-0.35,-0.3,0];//before change tip	*)	
	normal_tip_pos_cart:ARRAY[0..5, 0..2] OF LREAL:=[-0.35,-0.3209,0,
													 -0.1,-0.3209,0.1246,
													 0.3,-0.3209,0.1246,
													 0.3,-0.3209,-0.1246,
													 -0.1,-0.3209,-0.1246,
													-0.35,-0.3209,0];											
	base_height:LREAL;
	base_x:LREAL;
	base_z:LREAL;
	step_height_now:LREAL;
	step_length_now:LREAL;
	step_side_len_now:LREAL;
	start_height:LREAL;
	Mapping05:ARRAY[0..1] OF INT:=[0,5];
	stopGroup:ARRAY [0..1] OF BOOL:=[FALSE,FALSE];
	flag: INT;
	
	tipForceDesire:ARRAY[0..5,0..2] OF LREAL;
	jntTrqDesire:ARRAY[0..5,0..2] OF LREAL;
	fceLoadTime:LREAL:=0.2;
	tipForceDesireZeros:ARRAY[0..5,0..2] OF LREAL:=[0,0,0,
													 0,0,0,
													 0,0,0,
													 0,0,0,
													 0,0,0,
													 0,0,0];
	tipForceTarget:		 ARRAY[0..5,0..2] OF LREAL:=[0,0,0,
													 0,0,0,
													 0,0,0,
													 0,0,0,
													 0,0,0,
													 0,0,0];
													 
	//posture stabilizer
	bodyRPY : Vec3;		
	lstRollErr: LREAL:=0;
	lstPitchErr: LREAL:=0;
	sumRollErr: LREAL:=0;
	sumPitchErr: LREAL:=0;
	kp:LREAL:=1000;
	ki:LREAL:=3000;//对效果影响较大，kp的1-4倍效果差不多
	kd:LREAL:=100;//和0差别不明显
	kRatio:LREAL:=2;//pitch方向增益要给大点，通过该参数控制
	wrench: Vec3;
	fceStance: Vec3;
	readyToRelease: BOOL;
	enterReadyToReleaseCount:UDINT:=0;
	swingID : ARRAY[0..2] OF DINT;
	stanceID : ARRAY[0..2] OF DINT;
	jntFce : ARRAY[0..5] OF Vec3;
	tipFce : ARRAY[0..5] OF Vec3;//2G
	tipFce2B : ARRAY[0..5] OF Vec3;
	tipFce2H : ARRAY[0..5] OF Vec3;		
	jointFceStartRelease  : ARRAY[0..5, 0..2] OF LREAL;							 
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CalcAddfce" Id="{3ded01b0-1abc-44a9-8e61-2e31a7c177bc}">
      <Declaration><![CDATA[METHOD CalcAddfce : BOOL
VAR_INPUT
	//count: UDINT;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	maxAddFce:LREAL;
	maxFceStance:LREAL;
	fmatStance: Mat3;
	//fceStance: Vec3;
	maxFceSwing:LREAL;
	fmatSwing: Mat3;
	fceSwing: Vec3;
	
	rollErr: LREAL;
	pitchErr: LREAL;
	difRollErr: LREAL;
	difPitchErr: LREAL;
	//wrench: Vec3;
	
	tipFceTmp: ARRAY[0..5] OF Vec3;
	ratio: ARRAY[0..5] OF LREAL;
	i: INT;
	j: INT;
	step: LREAL;
	t: LREAL;
	bodyPmx: Mat3;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[maxAddFce:=800;
step:=4;
//IF isAllContact=TRUE THEN
//	sumRollErr:=0;
//	sumPitchErr:=0;
//END_IF

rollErr:=bodyRPY.data[0]-gvl.rpy_model[0];
pitchErr:=bodyRPY.data[1]-gvl.rpy_model[1];
IF ABS(rollErr) < 0.002 THEN
	rollErr:=0;
END_IF
IF ABS(pitchErr) < 0.002 THEN
	pitchERr:=0;
END_IF
sumRollErr:=sumRollErr+rollErr*delta_t;
difRollErr:=(rollErr-lstRollErr)/delta_t;
sumPitchErr:=sumPitchErr+pitchErr*delta_t;
difPitchErr:=(pitchErr-lstPitchErr)/delta_t;
lstRollErr:=rollErr;
lstPitchErr:=pitchErr;

wrench.data[0]:=kp*rollErr+ki*sumRollErr+kd*difRollErr;
wrench.data[1]:=kRatio*(kp*pitchErr+ki*sumPitchErr+kd*difPitchErr);
wrench.data[2]:=600;//gravity

//stance leg
fmatStance:=setMat3(leg_ref_pos[stanceID[0]].data[1]-body_ref_pos.data[1],leg_ref_pos[stanceID[1]].data[1]-body_ref_pos.data[1],leg_ref_pos[stanceID[2]].data[1]-body_ref_pos.data[1],
              -leg_ref_pos[stanceID[0]].data[0]+body_ref_pos.data[0],-leg_ref_pos[stanceID[1]].data[0]+body_ref_pos.data[0],-leg_ref_pos[stanceID[2]].data[0]+body_ref_pos.data[0],
              1,1,1);
fceStance:=MatMulVec(inv3(fmatStance),wrench);
maxFceStance:=MAX(ABS(fceStance.data[0]),ABS(fceStance.data[1]),ABS(fceStance.data[2]));
IF maxFceStance>maxAddFce THEN
	FOR i:=0 TO 2 DO
		tipFceTmp[stanceID[i]]:=SetVec3(0,0,-fceStance.data[i]/maxFceStance*maxAddFce);
	END_FOR
ELSE	
	FOR i:=0 TO 2 DO
		tipFceTmp[stanceID[i]]:=SetVec3(0,0,-fceStance.data[i]);
	END_FOR
END_IF
//swing leg
(*fmatSwing:=setMat3(tipPos[swingID[0]].data[1]-bodyPos.data[1],tipPos[swingID[1]].data[1]-bodyPos.data[1],tipPos2B[swingID[2]].data[1]-bodyPos.data[1],
              -tipPos2B[swingID[0]].data[0]+bodyPos.data[0],-tipPos2B[swingID[1]].data[0]+bodyPos.data[0],-tipPos2B[swingID[2]].data[0]+bodyPos.data[0],
              1,1,1);
fceSwing:=MatMulVec(inv3(fmatSwing),wrench);
maxFceSwing:=MAX(ABS(fceSwing.data[0]),ABS(fceSwing.data[1]),ABS(fceSwing.data[2]));
IF maxFceSwing>maxAddFce THEN
	FOR i:=0 TO 2 DO
		tipFceTmp[swingID[i]]:=SetVec3(0,0,-fceSwing.data[i]/maxFceSwing*maxAddFce);
	END_FOR
ELSE	
	FOR i:=0 TO 2 DO
		tipFceTmp[swingID[i]]:=SetVec3(0,0,-fceSwing.data[i]);
	END_FOR
END_IF*)

//方法1,空中给摆动腿加力，感觉只会导致更提前触地，并不能改善倾斜
(*
t := count*deltaT;
IF ABS(t-allContactTime)<deltaT THEN
	FOR i:=0 TO 5 DO
		ratio[i]:=1;
	END_FOR
END_IF
FOR i:=0 TO 2 DO
	IF t-allContactTime<period/2 THEN
		ratio[swingID[i]]:=ratio[swingID[i]]*0.99;//1-0
	ELSE
		ratio[swingID[i]]:=ratio[swingID[i]]/0.99;//0-1
	END_IF
	IF ratio[swingID[i]]]]><![CDATA[>1 THEN//限制在0.01~1
		ratio[swingID[i]]:=1;
	END_IF
	IF ratio[swingID[i]]<0.01 THEN
		ratio[swingID[i]]:=0.01;
	END_IF
	tipFce[stanceID[i]].data[2]:=ratio[stanceID[i]]*tipFceTmp[stanceID[i]].data[2];
	tipFce[swingID[i]].data[2]:=ratio[swingID[i]]*tipFceTmp[swingID[i]].data[2];
END_FOR*)

//方法2
FOR i:=0 TO 2 DO
	IF tipFceTmp[stanceID[i]].data[2]-tipFce[stanceID[i]].data[2]>step THEN
		tipFce[stanceID[i]].data[2]:=tipFce[stanceID[i]].data[2]+step;
	ELSIF tipFceTmp[stanceID[i]].data[2]-tipFce[stanceID[i]].data[2]<-step THEN
		tipFce[stanceID[i]].data[2]:=tipFce[stanceID[i]].data[2]-step;
	ELSE
		tipFce[stanceID[i]].data[2]:=tipFce[stanceID[i]].data[2];
	END_IF
END_FOR

FOR i:=0 TO 2 DO
	tipFce[swingID[i]]:=SetVec3(0,0,tipFce[swingID[i]].data[2]*0.995);
END_FOR


body_ref_ang.data[0]:= gvl.rpy_model[0];
body_ref_ang.data[1]:= gvl.rpy_model[1];                           
body_ref_ang.data[2]:= 0;

leg_ref_pos:=leg_ref_pos_init;
	fbRotMat(yaw := body_ref_ang.data[2], pitch := body_ref_ang.data[1],roll := body_ref_ang.data[0], rm => bodyPmx);
FOR i:=0 TO 5 DO
	tipFce2B[i] := MatMulVec(MatTranspose(bodyPmx),     tipFce[i]);
	tipFce2H[i] := MatMulVec(MatTranspose(Rleg[i]), tipFce2B[i]);
	gvl.legCtrl[i].DesireDriveForce(fTipDes:=tipFce2H[i].data,motorAng:=joint_ref_pos[i].data,
                                    legIndex:=i,fDrvDes=>jntFce[i].data);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cmd2Tgt1Step" Id="{bd7a10ed-e310-4f51-bc27-e9f6c2e8da34}">
      <Declaration><![CDATA[METHOD PUBLIC Cmd2Tgt1Step : lreal
VAR_INPUT
	cmdVel:LREAL;//desired velocity
	curVel:LREAL;//current velocity
	step:LREAL;
END_VAR
VAR_OUTPUT
	trgVel:lreal;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF step<0 THEN
	step:=-step;
END_IF
IF (curVel-cmdVel)<=-step THEN
    trgVel:=curVel+step;
ELSIF (curVel-cmdVel)>step THEN
    trgVel:=curVel-step;
else
    trgVel:=cmdVel;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="DoPlanning" Id="{2c5e077d-fe00-42bc-9b9b-3ddd946cb82a}">
      <Declaration><![CDATA[METHOD PUBLIC DoPlanning : BOOL
VAR_INPUT
	count : UDINT;
END_VAR
VAR
	i, j  : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF count = 0 THEN
	isFinished := FALSE;
	Initialize();
END_IF

IF count=10 THEN
	require_move:=TRUE;
END_IF

StateMachine();
TrjPlanning();
//WatchDog(count);//手柄连上再使能

IF quit_flag THEN
	isFinished := TRUE;
	quit_flag := FALSE;
	inTrot[0]:=FALSE;
	inTrot[1]:=FALSE;
	isTrotWalk:=FALSE;
	trot_vel_desire:=0;
	side_vel_desire:=0;
	turn_rate_desire:=0;
	gvl.TrotWalk_trot_vel_desire:=0;
    gvl.TrotWalk_side_vel_desire:=0;
    gvl.TrotWalk_turn_rate_desire:=0;
	FOR i:=0 TO 1 DO
		trot_vel[i]:=0;
		side_vel[i]:=0;
		turn_rate[i]:=0;
	END_FOR
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{3d82ae57-c5a1-4d15-a67f-3bf0ad10eeb0}">
      <Declaration><![CDATA[METHOD PUBLIC Initialize : BOOL
VAR_INPUT
END_VAR
VAR
	i, j : INT;
	sum_height : LREAL := 0;
	leg_pos    : ARRAY[0..2] OF LREAL;
	
	Rb : Mat3;
	hip_pos_j  : Vec3;
	leg_pos_wrt_com : Vec3;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Rleg[0]:=SetMat3(1,0,0,0,0,-1,0,1,0);
Rleg[1]:=SetMat3(-1,0,0,0,0,1,0,1,0,);
Rleg[2]:=SetMat3(-1,0,0,0,0,1,0,1,0);
Rleg[3]:=SetMat3(-1,0,0,0,0,1,0,1,0);
Rleg[4]:=SetMat3( -1,0,0,0,0,1,0,1,0);
Rleg[5]:=SetMat3(1,0,0,0,0,-1,0,1,0);

Rleg_hip_wrt_trj[0]:=SetMat3(1,0,0,0,1,0,0,0,1);
Rleg_hip_wrt_trj[1]:=SetMat3(-1,0,0,0,1,0,0,0,-1);
Rleg_hip_wrt_trj[2]:=SetMat3(-1,0,0,0,1,0,0,0,-1);
Rleg_hip_wrt_trj[3]:=SetMat3(-1,0,0,0,1,0,0,0,-1);
Rleg_hip_wrt_trj[4]:=SetMat3(-1,0,0,0,1,0,0,0,-1);
Rleg_hip_wrt_trj[5]:=SetMat3(1,0,0,0,1,0,0,0,1);

quit_flag  := FALSE;
gait_cycle := 0;
state[0]:=ready;
state[1]:=ready;
state_last[0]:=init;
state_last[1]:=init;
stopGroup[0]:=FALSE;
stopGroup[1]:=FALSE;
require_move:=FALSE;
require_move_last:=FALSE;
require_stop:=FALSE;
isTrotWalk:=TRUE;

delta_t:=1.0/gvl.sampleRate;

FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		IF ABS(gvl.jntLastRefPos[i, j] - gvl.jntActualPos[i, j]) < 0.3 THEN
			joint_ref_pos_init[i].data[j] := gvl.jntLastRefPos[i, j];
		ELSE
			joint_ref_pos_init[i].data[j] := gvl.jntActualPos[i, j];
		END_IF
		jointPosLast[i,j]:=joint_ref_pos_init[i].data[j];
	END_FOR
END_FOR

sum_height := 0;
FOR j := 0 TO 5 DO
	// FK
	gvl.legCtrl[j].ForwardKinetics(motorAngles := joint_ref_pos_init[j].data, legIndex:=j, tipPosition => leg_pos);
	leg_ref_pos_init_wrt_hip[j] := SetVec3(leg_pos[0], leg_pos[1], leg_pos[2]);
	sum_height := sum_height - leg_ref_pos_init_wrt_hip[j].data[1];
END_FOR
body_ref_pos_init := SetVec3(0, 0, sum_height/6.0);
body_ref_ang_init := SetVec3(0, 0, 0);

bodyRPY.data[0]:= gvl.rpy_model[0];
bodyRPY.data[1]:= gvl.rpy_model[1];                           
bodyRPY.data[2]:= 0;

FOR j := 0 TO 5 DO
	fbRotMat(yaw := body_ref_ang_init.data[2],
             pitch := body_ref_ang_init.data[1],
             roll := body_ref_ang_init.data[0],
             rm => Rb );
	hip_pos_j := SetVec3(hip_pos[j, 0], hip_pos[j, 1], hip_pos[j, 2]);
	leg_pos_wrt_com := VecAdd(MatMulVec(Rleg[j], leg_ref_pos_init_wrt_hip[j]), hip_pos_j);
    leg_ref_pos_init[j] := VecAdd(body_ref_pos_init, MatMulVec(Rb, leg_pos_wrt_com));
END_FOR

FOR i:=0 TO 5 DO
	tip_vel_ref[i]:=setVec3(0,0,0);
	tip_pos_ref[i]:= MatMulVec( Rleg_hip_wrt_trj[i], leg_ref_pos_init_wrt_hip[i]);
	FOR j:=0 TO 2 DO
		normal_tip_pos_cart[i,j]:=tip_pos_ref[i].data[j];
	END_FOR
END_FOR
tip_pos_ref_last:=tip_pos_ref;

body_ref_pos := body_ref_pos_init;
body_ref_ang := body_ref_ang_init;
leg_ref_pos := leg_ref_pos_init;
leg_ref_pos_wrt_hip := leg_ref_pos_init_wrt_hip;

FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		jointPosTarget[i, j] := joint_ref_pos_init[i].data[j];
		jointVelTarget[i, j] := 0;
		jointFceTarget[i, j] := 0;
	END_FOR
	tipFce[i]:=SetVec3(0,0,0);
END_FOR

stanceID[0]:=1;stanceID[1]:=3;stanceID[2]:=5;
swingID[0]:=0;swingID[1]:=2;swingID[2]:=4;

enterReadyToReleaseCount:=0;
lstRollErr:=0;
lstPitchErr:=0;
sumRollErr:=0;
sumPitchErr:=0;
readyToRelease:=FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine" Id="{9abc2042-f6f4-44b3-b3b1-730cb634b2aa}">
      <Declaration><![CDATA[METHOD PUBLIC StateMachine : BOOL
VAR_INPUT
END_VAR
VAR
	temp:LREAL;
	i: INT;
	j: INT;
	k: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//set target value
trot_vel_desire:=gvl.TrotWalk_trot_vel_desire;
side_vel_desire:=gvl.TrotWalk_side_vel_desire;
turn_rate_desire:=gvl.TrotWalk_turn_rate_desire;
step[0]:=gvl.TrotWalk_step[0];
step[1]:=gvl.TrotWalk_step[1];
step[2]:=gvl.TrotWalk_step[2];

//state switch
IF require_move_last=FALSE AND require_move=TRUE THEN
	gait_cycle_enter[0]:=gait_cycle;
	gait_cycle_enter[1]:=gait_cycle;
	require_move:=FALSE;
	flag:=1;
	FOR i:=0 TO 1 DO
		inTrot[i]:=TRUE;
		stopGroup[i]:=FALSE;
		duty[i]:=gvl.duty_desire;
		period[i]:=gvl.period_desire;
		step_height[i]:=gvl.step_height_desire;
	END_FOR
END_IF
IF inTrot[0]=TRUE THEN
	temp:=(gait_cycle-gait_cycle_enter[0]) MOD TRUNC(period[0]*gvl.sampleRate);
	IF temp>=(1-duty[0])*gvl.sampleRate*period[0] THEN
		state[0]:=stance;
	ELSE 
		state[0]:=swing;
	END_IF
END_IF
IF inTrot[1]=TRUE THEN	
	IF flag=1 THEN
		temp:=TRUNC((gait_cycle-gait_cycle_enter[1]+0.5*period[1]*gvl.sampleRate) )MOD TRUNC(period[1]*gvl.sampleRate);
	ELSE
		temp:=TRUNC((gait_cycle-gait_cycle_enter[1]) )MOD TRUNC(period[1]*gvl.sampleRate);
	END_IF
	
	(*IF temp>=(1-duty[1])*gvl.sampleRate*period[1] THEN
		state[1]:=stance;
	ELSE 
		state[1]:=swing;			
	END_IF*)
	
	IF state[1]=ready AND (gait_cycle-gait_cycle_enter[0])<LREAL_TO_UDINT(0.5*period[0]*gvl.sampleRate) AND flag=1 THEN
		state[1]:=ready;
	ELSE
		flag:=0;
		IF temp>=(1-duty[1])*gvl.sampleRate*period[1] THEN
			state[1]:=stance;
		ELSE 
			state[1]:=swing;			
		END_IF
	END_IF
END_IF

FOR i:=0 TO 1 DO
	IF state[i]<> state_last[i] THEN
		IF state[i]=stance THEN
			count_en_ST[i]:=gait_cycle;
			IF i=0 THEN
				stanceID[0]:=0;stanceID[1]:=2;stanceID[2]:=4;
			END_IF
			IF i=1 THEN
				stanceID[0]:=1;stanceID[1]:=3;stanceID[2]:=5;
			END_IF
			
			FOR j:=0 TO 2 DO
				FOR k:=0 TO 2 DO
					tip_pos_en_ST[2*j+i].data[k]:=tip_pos_ref[2*j+i].data[k];
					tip_vel_en_ST[2*j+i].data[k]:=tip_vel_ref[2*j+i].data[k];
				END_FOR
			END_FOR
		END_IF
		
		IF state[i]=swing THEN
			count_en_SW[i]:=gait_cycle;
			IF i=0 THEN
				swingID[0]:=0;swingID[1]:=2;swingID[2]:=4;
			END_IF
			IF i=1 THEN
				swingID[0]:=1;swingID[1]:=3;swingID[2]:=5;
			END_IF			
			
			gait_cycle_enter[i]:=gait_cycle;
			FOR j:=0 TO 2 DO
				FOR k:=0 TO 2 DO
					tip_pos_en_SW[2*j+i].data[k]:=tip_pos_ref[2*j+i].data[k];
					tip_vel_en_SW[2*j+i].data[k]:=tip_vel_ref[2*j+i].data[k];
				END_FOR
			END_FOR	
			duty[i]:=gvl.duty_desire;
			period[i]:=gvl.period_desire;
			step_height[i]:=gvl.step_height_desire;
			IF 	require_stop=TRUE THEN
				trot_vel_desire:=0;
				side_vel_desire:=0;
				turn_rate_desire:=0;
				gvl.TrotWalk_trot_vel_desire:=0;
                gvl.TrotWalk_side_vel_desire:=0;
                gvl.TrotWalk_turn_rate_desire:=0;
								
				IF trot_vel_desire=trot_vel[i] AND side_vel_desire=side_vel[i] AND turn_rate_desire=turn_rate[i] THEN	
					state[i]:=ready;
					stopGroup[i]:=TRUE;
					inTrot[i]:=FALSE;
				END_IF
			END_IF
			Cmd2Tgt1Step(cmdVel:= trot_vel_desire, curVel:=trot_vel[i] , step:= step[0], trgVel=>trot_vel[i] );
			Cmd2Tgt1Step(cmdVel:= side_vel_desire, curVel:=side_vel[i] , step:= step[1], trgVel=>side_vel[i] );
			Cmd2Tgt1Step(cmdVel:= turn_rate_desire, curVel:=turn_rate[i] , step:= step[2], trgVel=>turn_rate[i] );
		END_IF
		
		IF state[i]=ready THEN
			count_en_RD[i]:=gait_cycle;
			FOR j:=0 TO 2 DO
				FOR k:=0 TO 2 DO
					tip_pos_en_RD[2*j+i].data[k]:=tip_pos_ref[2*j+i].data[k];
					tip_vel_en_RD[2*j+i].data[k]:=tip_vel_ref[2*j+i].data[k];
				END_FOR
			END_FOR			
		END_IF
	END_IF
	IF state[i]=ready AND gait_cycle-count_en_RD[i]=LREAL_TO_UDINT(2*gvl.sampleRate) THEN	
		count_en_RD[i]:=gait_cycle;
		FOR j:=0 TO 2 DO
			FOR k:=0 TO 2 DO
				tip_pos_en_RD[2*j+i].data[k]:=tip_pos_ref[2*j+i].data[k];
				tip_vel_en_RD[2*j+i].data[k]:=tip_vel_ref[2*j+i].data[k];
			END_FOR
		END_FOR			
	END_IF		
END_FOR

IF stopGroup[0]=TRUE AND stopGroup[1]=TRUE AND require_stop=TRUE AND readyToRelease=FALSE  THEN
	require_stop:=FALSE;
	readyToRelease:=TRUE;
	enterReadyToReleaseCount:=gait_cycle;
	isTrotWalk:=FALSE;
	jointFceStartRelease:=jointFceTarget;
END_IF


state_last:=state; 
require_move_last:=require_move;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrjPlanning" Id="{3231b41c-9cb1-401c-a7e8-8a8bf497a42a}">
      <Declaration><![CDATA[METHOD PUBLIC TrjPlanning : BOOL
VAR_INPUT
END_VAR

VAR
	i: INT;
	k:int;
	FixTrj_tn:ARRAY[0..4] OF LREAL:=[0,0.25,0.5,0.75,1];
	InterplateValue:ARRAY[0..4] OF LREAL;
	InterplateTime:ARRAY[0..4] OF LREAL;
	start_vel:LREAL;
	end_vel:LREAL;
	j: INT;
	Rb_target1: Mat3;
	temp: vec3;
	Rb: Mat3;
	
	hip_pos_j : Vec3;
	leg_ref_pos_wrt_com_j : Vec3;
	tmp : Vec3;
	tip_pos, tip_vel : Vec3;
	jointTmpPosLast: ARRAY[0..2] OF LREAL;
	
	tipForceDesireLegA:	 ARRAY[0..5,0..2] OF LREAL:=[0,-125*0,0,
													 0,0,0,
													 0,0,0,
													 0,0,0,
													 0,0,0,
													 0,0,0];
	tipForceDesireLegF:	 ARRAY[0..5,0..2] OF LREAL:=[0,0,0,
													 0,0,0,
													 0,0,0,
													 0,0,0,
													 0,0,0,
													 0,-145*0.3,0];
	tr: LREAL;
	
	tempTipForce:ARRAY [0..2] OF LREAL;
	temJntActPos:ARRAY [0..2] OF LREAL;
	tempDesJntTrq:ARRAY [0..2] OF LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[gait_cycle := gait_cycle + 1;
FOR k:=0 TO 1 DO
	IF state[k]=swing THEN
		FOR i:=0 TO 4 DO
			SwingTrj_tn[i]:=FixTrj_tn[i]*period[k]*(1-duty[k]);
		END_FOR
		step_height_now :=step_height[k];
		FOR i:=0 TO 2 DO
			//trj planning in y direction (up/down)
			base_height:=normal_tip_pos_cart[2*i+k,1];
			start_height:=tip_pos_en_SW[2*i+k].data[1];
			InterplateValue[0]:=start_height;
			InterplateValue[1]:=(base_height * 0.05 + start_height * 0.95) + step_height_now * 0.6;
			InterplateValue[2]:=(base_height * 0.25 + start_height * 0.75) + step_height_now * 1.0;
			InterplateValue[3]:=(base_height * 0.65 + start_height * 0.35) + step_height_now * 0.6;
			InterplateValue[4]:=base_height;	
			end_vel:=-0.01 / (period[k] * duty[k]);		
			start_vel:=tip_vel_en_SW[2*i+k].data[1];
			fbCubicSpline(x:=SwingTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
				xt:=(gait_cycle-count_en_SW[k])*delta_t , yt=> tip_pos_ref[2*i+k].data[1], vt=> );
				
			//trj planning in x direction (forward/backward)
			base_x:=normal_tip_pos_cart[2*i+k,0];
			trot_vel_now[k]:=trot_vel[k]-turn_rate[k]*(hip_pos[2*i+k,1]-normal_tip_pos_cart[2*i+k,2]);
			step_length_now:= period[k] * duty[k] * trot_vel_now[k];
		 	InterplateValue[0]:=tip_pos_en_SW[2*i+k].data[0];	
		 	InterplateValue[1]:=base_x-0.48*step_length_now;;
		 	InterplateValue[2]:=base_x;
		 	InterplateValue[3]:=base_x+0.48*step_length_now;
		 	InterplateValue[4]:=base_x+0.5*step_length_now;
		 	end_vel:=-trot_vel_now[k];
		 	start_vel:=tip_vel_en_SW[2*i+k].data[0];
			fbCubicSpline(x:=SwingTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
				xt:=(gait_cycle-count_en_SW[k])*delta_t , yt=> tip_pos_ref[2*i+k].data[0], vt=> );			
			
			//trj planning in z direction (right/left)
			base_z:=normal_tip_pos_cart[2*i+k,2];
			turn_vel_now[k]:=turn_rate[k]*(hip_pos[2*i+k,0]+normal_tip_pos_cart[2*i+k,0])+side_vel[k];
			step_side_len_now := period[k] * duty[k] * turn_vel_now[k];
			InterplateValue[0]:=tip_pos_en_SW[2*i+k].data[2];
		 	InterplateValue[1]:=base_z+0.48* step_side_len_now;
		 	InterplateValue[2]:=base_z;
		 	InterplateValue[3]:=base_z-0.48* step_side_len_now;
		 	InterplateValue[4]:=base_z-0.50* step_side_len_now;			
			end_vel:=turn_vel_now[k];
		 	start_vel:=tip_vel_en_SW[2*i+k].data[2];			
		 	fbCubicSpline(x:=SwingTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
				xt:=(gait_cycle-count_en_SW[k])*delta_t , yt=> tip_pos_ref[2*i+k].data[2], vt=> );				
		END_FOR
	ELSIF state[k]=stance THEN 
		FOR i:=0 TO 4 DO
			StanceTrj_tn[i]:=FixTrj_tn[i]*period[k]*duty[k];
		END_FOR
		FOR i:=0 TO 2 DO
			//force compensator
			IF k=0 THEN
				tipForceTarget:=tipForceDesireLegA;
			ELSE
				tipForceTarget:=tipForceDesireLegF;
			END_IF
			IF gait_cycle-count_en_ST[k]>=0 AND  (gait_cycle-count_en_ST[k])<=fceLoadTime*gvl.sampleRate THEN
				tr  := UDINT_TO_LREAL(gait_cycle-count_en_ST[k]) / gvl.sampleRate / fceLoadTime;
				fbGetPivot(tNow := tr, tTotal := 1.0, pivot => pvt);
				FOR j:=0 TO 2 DO
					tipForceDesire[2*i+k,j]:=(1-pvt)*tipForceDesireZeros[2*i+k,j]+pvt*tipForceTarget[2*i+k,j];
				END_FOR
			ELSIF gait_cycle-count_en_ST[k]>=LREAL_TO_UDINT((period[k]*duty[k]-fceLoadTime)*gvl.sampleRate) AND gait_cycle-count_en_ST[k]<=LREAL_TO_UDINT(period[k]*duty[k]*gvl.sampleRate) THEN
				FOR j:=0 TO 2 DO
					tipForceDesire[2*i+k,j]:=(1-pvt)*tipForceTarget[2*i+k,j]+pvt*tipForceDesireZeros[2*i+k,j];
				END_FOR
			END_IF 

			//trj planning in y direction (up/down)
			start_height:=tip_pos_en_ST[2*i+k].data[1];
			InterplateValue[0]:=start_height;
			InterplateValue[1]:=start_height-0.0045*0;//*0.1
			InterplateValue[2]:=start_height-0.0085*0;
			InterplateValue[3]:=start_height-0.0125*0;
			InterplateValue[4]:=start_height-0.0160*0;			
			end_vel:=0;
			start_vel:=tip_vel_en_ST[2*i+k].data[1];
			fbCubicSpline(x:=StanceTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
				xt:=(gait_cycle-count_en_ST[k])*delta_t , yt=> tip_pos_ref[2*i+k].data[1], vt=> );	
			
		    //trj planning in X direction (forward/backward)
			trot_vel_now[k]:=trot_vel[k]-turn_rate[k]*(hip_pos[2*i+k,1]-normal_tip_pos_cart[2*i+k,2]);	
			step_length_now := period[k] * duty[k] * trot_vel_now[k];
			InterplateValue[0]:=tip_pos_en_ST[2*i+k].data[0];
			InterplateValue[1]:=tip_pos_en_ST[2*i+k].data[0]-0.28*step_length_now;
			InterplateValue[2]:=tip_pos_en_ST[2*i+k].data[0]-0.50*step_length_now;
			InterplateValue[3]:=tip_pos_en_ST[2*i+k].data[0]-0.72*step_length_now;
			InterplateValue[4]:=tip_pos_en_ST[2*i+k].data[0]-1.00*step_length_now;	
			end_vel:= -trot_vel_now[k];
			start_vel:=tip_vel_en_ST[2*i+k].data[0];		
			fbCubicSpline(x:=StanceTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
				xt:=(gait_cycle-count_en_ST[k])*delta_t , yt=> tip_pos_ref[2*i+k].data[0], vt=> );
			
			// trj planning in z direction (right/left)
			turn_vel_now[k]:=turn_rate[k]*(hip_pos[2*i+k,0]+normal_tip_pos_cart[2*i+k,0])+side_vel[k];
			step_side_len_now := period[k] * duty[k] * turn_vel_now[k];
			InterplateValue[0]:=tip_pos_en_ST[2*i+k].data[2];
			InterplateValue[1]:=tip_pos_en_ST[2*i+k].data[2]+0.28*step_side_len_now;
			InterplateValue[2]:=tip_pos_en_ST[2*i+k].data[2]+0.50*step_side_len_now;
			InterplateValue[3]:=tip_pos_en_ST[2*i+k].data[2]+0.72*step_side_len_now;
			InterplateValue[4]:=tip_pos_en_ST[2*i+k].data[2]+1.00*step_side_len_now;
			end_vel:=turn_vel_now[k];
			start_vel:=tip_vel_en_ST[2*i+k].data[2];
			fbCubicSpline(x:=StanceTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
				xt:=(gait_cycle-count_en_ST[k])*delta_t , yt=> tip_pos_ref[2*i+k].data[2], vt=> );				
		END_FOR
	ELSE	
		FOR i:=0 TO 4 DO
			ReadyTrj_tn[i]:=FixTrj_tn[i]*2;//2s for ready gait
		END_FOR	
		FOR i:=0 TO 2 DO
			//trj planning in x direction (forward/backward)
			InterplateValue[0]:=tip_pos_en_RD[2*i+k].data[0];
			InterplateValue[1]:=tip_pos_en_RD[2*i+k].data[0];
			InterplateValue[2]:=tip_pos_en_RD[2*i+k].data[0];
			InterplateValue[3]:=tip_pos_en_RD[2*i+k].data[0];
			InterplateValue[4]:=tip_pos_en_RD[2*i+k].data[0];
			end_vel:=0;
			start_vel:=tip_vel_en_ST[2*i+k].data[0];
			fbCubicSpline(x:=ReadyTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
				xt:=(gait_cycle-count_en_RD[k])*delta_t , yt=> tip_pos_ref[2*i+k].data[0], vt=> );	
			
			//trj planning in y direction (right/left)
			InterplateValue[0]:=tip_pos_en_RD[2*i+k].data[1];
			InterplateValue[1]:=tip_pos_en_RD[2*i+k].data[1];
			InterplateValue[2]:=tip_pos_en_RD[2*i+k].data[1];
			InterplateValue[3]:=tip_pos_en_RD[2*i+k].data[1];
			InterplateValue[4]:=tip_pos_en_RD[2*i+k].data[1];
			end_vel:=0;
			start_vel:=tip_vel_en_ST[2*i+k].data[1];
			fbCubicSpline(x:=ReadyTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
				xt:=(gait_cycle-count_en_RD[k])*delta_t , yt=> tip_pos_ref[2*i+k].data[1], vt=> );				
		
			//trj planning in z direction (up/down)
			InterplateValue[0]:=tip_pos_en_RD[2*i+k].data[2];
			InterplateValue[1]:=tip_pos_en_RD[2*i+k].data[2];
			InterplateValue[2]:=tip_pos_en_RD[2*i+k].data[2];
			InterplateValue[3]:=tip_pos_en_RD[2*i+k].data[2];
			InterplateValue[4]:=tip_pos_en_RD[2*i+k].data[2];
			end_vel:=0;
			start_vel:=tip_vel_en_ST[2*i+k].data[2];
			fbCubicSpline(x:=ReadyTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
				xt:=(gait_cycle-count_en_RD[k])*delta_t , yt=> tip_pos_ref[2*i+k].data[2], vt=> );				
		END_FOR
	END_IF
END_FOR

FOR i:=0 TO 5 DO
	FOR j:=0 TO 2 DO
		tip_vel_ref[i].data[j]:=(tip_pos_ref[i].data[j]-tip_pos_ref_last[i].data[j])/delta_t;
	END_FOR
END_FOR
tip_pos_ref_last:=tip_pos_ref;

body_ref_pos:=body_ref_pos_init;
//body_ref_ang:=body_ref_ang_init;

body_ref_ang.data[0]:= gvl.rpy_model[0];
body_ref_ang.data[1]:= gvl.rpy_model[1];                           
body_ref_ang.data[2]:= 0;

leg_ref_pos:=leg_ref_pos_init;
FOR i:=0 TO 5 DO
	fbRotMat(yaw := body_ref_ang.data[2], pitch := body_ref_ang.data[1],roll := body_ref_ang.data[0], rm =>  Rb_target1 );
	temp.data[0]:=hip_pos[i,0];temp.data[1]:=hip_pos[i,1];temp.data[2]:=hip_pos[i,2];
	leg_ref_pos[i]:= VecAdd( MatMulVec(Rb_target1, VecAdd(temp,MatMulVec(Rleg[0],tip_pos_ref[i]))),body_ref_pos);
END_FOR

// transform TO leg local frame AND DO inverse kinematics

FOR j := 0 TO 5 DO
	fbRotMat(
    	yaw := body_ref_ang.data[2], 
		pitch := body_ref_ang.data[1], 
		roll := body_ref_ang.data[0], 
		rm => Rb);
	hip_pos_j := SetVec3(hip_pos[j, 0], hip_pos[j, 1], hip_pos[j, 2]);

	//leg_ref_pos_wrt_com = Rb' * (leg_ref_pos - body_ref_pos)
	leg_ref_pos_wrt_com_j := MatMulVec(
		                         MatTranspose(Rb),
								 VecAdd(
									 leg_ref_pos[j],
									 VecNeg(body_ref_pos)
                                 )
                             );
	// leg_ref_pos_wrt_hip = Rleg' * (leg_ref_pos_wrt_com_j - hip_pos)
	leg_ref_pos_next_wrt_hip[j] := MatMulVec(
		                               MatTranspose(Rleg[j]),
									   VecAdd(
										   leg_ref_pos_wrt_com_j,
										   VecNeg(hip_pos_j)
									   )
								   );
								   
	leg_ref_vel_next_wrt_hip[j] := VecMulNum(VecAdd(leg_ref_pos_next_wrt_hip[j], VecNeg(leg_ref_pos_wrt_hip[j])), DINT_TO_LREAL(gvl.sampleRate));
END_FOR


// mapping to actual joints
FOR j := 0 TO 5 DO
	tmp := leg_ref_pos_next_wrt_hip[leg_index_mapping[j]-1];
	tip_pos := SetVec3(tmp.data[0], tmp.data[1], tmp.data[2]);
	tmp := leg_ref_vel_next_wrt_hip[leg_index_mapping[j]-1];
	tip_vel := SetVec3(tmp.data[0], tmp.data[1], tmp.data[2]);
	FOR i:= 0 TO 2 DO
		jointTmpPosLast[i]:=jointPosLast[j,i];
	END_FOR		
	gvl.legCtrl[j].InversePosAndVel(
		tipPos := tip_pos.data, 
		tipVel := tip_vel.data, 
		refPosLast:=jointTmpPosLast,
		legIndex:=j,
		jntPos => joint_ref_pos[j].data, 
		jntVel => joint_ref_vel[j].data);
	
END_FOR

// link to physical outputs
FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		jointPosTarget[i, j] := joint_ref_pos[i].data[j];
		jointPosLast[i,j]:=jointPosTarget[i, j] ;
		jointVelTarget[i, j] := joint_ref_vel[i].data[j];
		jointFceTarget[i, j] := 0;
	END_FOR
END_FOR



IF isTrotWalk=TRUE THEN
	
	FOR i:=0 TO 5 DO
		tempTipForce[0]:=tipForceDesire[i,0];tempTipForce[1]:=tipForceDesire[i,1];tempTipForce[2]:=tipForceDesire[i,2];
		temJntActPos[0]:=gvl.jntActualPos[i,0];temJntActPos[1]:=gvl.jntActualPos[i,1];temJntActPos[2]:=gvl.jntActualPos[i,2];
		gvl.legCtrl[i].DesireDriveForce(fTipDes:=tempTipForce , motorAng:=temJntActPos , legIndex:=i , fDrvDes=>tempDesJntTrq );
		jntTrqDesire[i,0]:=tempDesJntTrq[0];jntTrqDesire[i,1]:=tempDesJntTrq[1];jntTrqDesire[i,2]:=tempDesJntTrq[2];
	END_FOR

	CalcAddfce();
	FOR i := 0 TO 5 DO
		FOR j := 0 TO 2 DO
			//jointFceTarget[i, j] := jntFce[i].data[j];//姿态稳定器
			jointFceTarget[i, j] := jntFce[i].data[j]+jntTrqDesire[i,j];//姿态稳定器+静态补偿
		END_FOR
	END_FOR	
END_IF
IF readyToRelease=TRUE THEN//use 100 count to release
	FOR i := 0 TO 5 DO
		FOR j := 0 TO 2 DO
			jointFceTarget[i, j] := jointFceStartRelease[i, j]-0.01*(gait_cycle-enterReadyToReleaseCount)*jointFceStartRelease[i,j];
		END_FOR
	END_FOR
	IF gait_cycle*delta_T-enterReadyToReleaseCount*delta_T>=100*delta_T THEN
		quit_flag:=TRUE;
		readyToRelease:=FALSE;
	END_IF
END_IF


// store refs for next loop
leg_ref_pos_wrt_hip := leg_ref_pos_next_wrt_hip;








]]></ST>
      </Implementation>
    </Method>
    <Method Name="WatchDog" Id="{14f7497e-8988-47ae-a51e-68fb0d5291be}">
      <Declaration><![CDATA[METHOD WatchDog : BOOL
VAR_INPUT
	count: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF isFeed=TRUE THEN//可能是通过手柄控制该变量，固定周期发送一次true过来，因该更新周期小于0.5s。假如固定周期内没有发送true过来，计时超过0.5s后程序将改变步长为零
	starveCount := count + TRUNC(gvl.sampleRate*0.5);//0.5 second
	isFeed := FALSE;
END_IF

IF count>=starveCount THEN
	gvl.TrotWalk_trot_vel_desire:=0;
    gvl.TrotWalk_side_vel_desire:=0;
    gvl.TrotWalk_turn_rate_desire:=0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="TrotWalk">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="TrotWalk.CalcAddfce">
      <LineId Id="19" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="52" Count="5" />
      <LineId Id="24" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="96" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="291" Count="1" />
      <LineId Id="290" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="63" Count="1" />
      <LineId Id="69" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="71" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="158" Count="12" />
      <LineId Id="157" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="220" Count="1" />
      <LineId Id="223" Count="1" />
      <LineId Id="222" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="190" Count="2" />
      <LineId Id="228" Count="2" />
      <LineId Id="227" Count="0" />
      <LineId Id="231" Count="1" />
      <LineId Id="184" Count="1" />
      <LineId Id="180" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="77" Count="1" />
      <LineId Id="76" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="320" Count="0" />
      <LineId Id="322" Count="3" />
      <LineId Id="82" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="117" Count="1" />
      <LineId Id="83" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="84" Count="0" />
    </LineIds>
    <LineIds Name="TrotWalk.Cmd2Tgt1Step">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="12" Count="5" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="TrotWalk.DoPlanning">
      <LineId Id="45" Count="3" />
      <LineId Id="119" Count="0" />
      <LineId Id="116" Count="2" />
      <LineId Id="115" Count="0" />
      <LineId Id="50" Count="2" />
      <LineId Id="120" Count="0" />
      <LineId Id="53" Count="2" />
      <LineId Id="71" Count="0" />
      <LineId Id="79" Count="1" />
      <LineId Id="89" Count="4" />
      <LineId Id="88" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="106" Count="1" />
      <LineId Id="105" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TrotWalk.Initialize">
      <LineId Id="123" Count="4" />
      <LineId Id="8" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="190" Count="4" />
      <LineId Id="20" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="182" Count="2" />
      <LineId Id="164" Count="1" />
      <LineId Id="167" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="22" Count="7" />
      <LineId Id="141" Count="0" />
      <LineId Id="30" Count="11" />
      <LineId Id="239" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="43" Count="8" />
      <LineId Id="156" Count="1" />
      <LineId Id="185" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="222" Count="2" />
      <LineId Id="186" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="88" Count="3" />
      <LineId Id="87" Count="0" />
      <LineId Id="64" Count="6" />
      <LineId Id="249" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="242" Count="4" />
      <LineId Id="241" Count="0" />
    </LineIds>
    <LineIds Name="TrotWalk.StateMachine">
      <LineId Id="80" Count="0" />
      <LineId Id="85" Count="2" />
      <LineId Id="89" Count="2" />
      <LineId Id="83" Count="1" />
      <LineId Id="46" Count="1" />
      <LineId Id="256" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="232" Count="1" />
      <LineId Id="48" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="54" Count="3" />
      <LineId Id="52" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="268" Count="2" />
      <LineId Id="263" Count="0" />
      <LineId Id="259" Count="3" />
      <LineId Id="257" Count="1" />
      <LineId Id="105" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="113" Count="1" />
      <LineId Id="110" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="304" Count="2" />
      <LineId Id="317" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="302" Count="1" />
      <LineId Id="255" Count="0" />
      <LineId Id="150" Count="4" />
      <LineId Id="148" Count="0" />
      <LineId Id="242" Count="1" />
      <LineId Id="241" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="160" Count="1" />
      <LineId Id="156" Count="0" />
      <LineId Id="273" Count="1" />
      <LineId Id="272" Count="0" />
      <LineId Id="271" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="163" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="190" Count="2" />
      <LineId Id="149" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="167" Count="1" />
      <LineId Id="172" Count="4" />
      <LineId Id="170" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="177" Count="7" />
      <LineId Id="124" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="326" Count="1" />
      <LineId Id="337" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="74" Count="0" />
    </LineIds>
    <LineIds Name="TrotWalk.TrjPlanning">
      <LineId Id="182" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="318" Count="2" />
      <LineId Id="322" Count="1" />
      <LineId Id="325" Count="0" />
      <LineId Id="327" Count="2" />
      <LineId Id="326" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="324" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="333" Count="5" />
      <LineId Id="340" Count="5" />
      <LineId Id="339" Count="0" />
      <LineId Id="346" Count="1" />
      <LineId Id="332" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="358" Count="2" />
      <LineId Id="355" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="356" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="366" Count="1" />
      <LineId Id="364" Count="0" />
      <LineId Id="368" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="493" Count="1" />
      <LineId Id="496" Count="1" />
      <LineId Id="495" Count="0" />
      <LineId Id="489" Count="0" />
      <LineId Id="498" Count="1" />
      <LineId Id="501" Count="6" />
      <LineId Id="490" Count="0" />
      <LineId Id="488" Count="0" />
      <LineId Id="371" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="377" Count="3" />
      <LineId Id="376" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="381" Count="1" />
      <LineId Id="385" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="386" Count="1" />
      <LineId Id="384" Count="0" />
      <LineId Id="389" Count="3" />
      <LineId Id="388" Count="0" />
      <LineId Id="394" Count="0" />
      <LineId Id="393" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="395" Count="4" />
      <LineId Id="402" Count="3" />
      <LineId Id="401" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="409" Count="0" />
      <LineId Id="372" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="411" Count="1" />
      <LineId Id="370" Count="0" />
      <LineId Id="413" Count="0" />
      <LineId Id="417" Count="0" />
      <LineId Id="422" Count="7" />
      <LineId Id="421" Count="0" />
      <LineId Id="419" Count="0" />
      <LineId Id="430" Count="0" />
      <LineId Id="432" Count="7" />
      <LineId Id="431" Count="0" />
      <LineId Id="420" Count="0" />
      <LineId Id="440" Count="0" />
      <LineId Id="443" Count="7" />
      <LineId Id="442" Count="0" />
      <LineId Id="418" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="178" Count="1" />
      <LineId Id="177" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="198" Count="2" />
      <LineId Id="552" Count="2" />
      <LineId Id="551" Count="0" />
      <LineId Id="555" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="201" Count="1" />
      <LineId Id="205" Count="1" />
      <LineId Id="203" Count="0" />
      <LineId Id="209" Count="59" />
      <LineId Id="682" Count="0" />
      <LineId Id="681" Count="0" />
      <LineId Id="688" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="689" Count="0" />
      <LineId Id="692" Count="4" />
      <LineId Id="691" Count="0" />
      <LineId Id="690" Count="0" />
      <LineId Id="593" Count="0" />
      <LineId Id="596" Count="1" />
      <LineId Id="701" Count="0" />
      <LineId Id="598" Count="1" />
      <LineId Id="595" Count="0" />
      <LineId Id="594" Count="0" />
      <LineId Id="636" Count="7" />
      <LineId Id="742" Count="0" />
      <LineId Id="644" Count="0" />
      <LineId Id="544" Count="0" />
      <LineId Id="549" Count="0" />
      <LineId Id="269" Count="2" />
      <LineId Id="208" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="172" Count="3" />
      <LineId Id="170" Count="0" />
      <LineId Id="169" Count="0" />
    </LineIds>
    <LineIds Name="TrotWalk.WatchDog">
      <LineId Id="7" Count="5" />
      <LineId Id="22" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>