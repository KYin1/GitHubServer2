<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="LiftBodyGait" Id="{1c46e5d3-8b74-41f2-8d3e-a571cdfef955}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC LiftBodyGait
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR 
	isFinished : BOOL := FALSE;
	tTotal     : LREAL := 2.5;
	height     : LREAL := -0.05;
	
	// robot geometrical parameters
	hip_pos : ARRAY[0..5, 0..2] OF LREAL := [-0.369,  -0.125, 0,
                                             0,  -0.28, 0,
                                             0.36, -0.125, 0,
                                             0.36, 0.125, 0,
											 0,0.28,0,
											 -0.369,0.125,0];

	leg_index_mapping : ARRAY[0..5] OF INT := [1, 2, 3, 4,5,6];
	Rleg : ARRAY[0..5] OF Mat3;
	
	gait_cycle : UDINT := 0;
	quit_flag : BOOL := FALSE;
	
	joint_ref_pos_init : ARRAY[0..5] OF Vec3;
	jointPosLast   : ARRAY[0..5, 0..2] OF LREAL; 
	
	body_ref_pos_init : Vec3;
	body_ref_ang_init : Vec3;
    leg_ref_pos_init : ARRAY[0..5] OF Vec3;
	leg_ref_pos_init_wrt_hip : ARRAY[0..5] OF Vec3;

	body_ref_pos : Vec3;
	body_ref_ang : Vec3;
    leg_ref_pos : ARRAY[0..5] OF Vec3;
	leg_ref_pos_wrt_hip : ARRAY[0..5] OF Vec3;
	
	body_ref_pos_next : Vec3;
	body_ref_ang_next : Vec3;
    leg_ref_pos_next : ARRAY[0..5] OF Vec3;
	leg_ref_pos_next_wrt_hip : ARRAY[0..5] OF Vec3;
	leg_ref_vel_next_wrt_hip : ARRAY[0..5] OF Vec3;
	
	// output test
	joint_ref_pos   : ARRAY[0..5] OF Vec3;
	joint_ref_vel   : ARRAY[0..5] OF Vec3;
	
	jointPosTarget  : ARRAY[0..5, 0..2] OF LREAL; 
	jointVelTarget  : ARRAY[0..5, 0..2] OF LREAL;  
	jointFceTarget  : ARRAY[0..5, 0..2] OF LREAL;  
	
	pvt, pvtDot : LREAL;
	
	fbRotmat : RotM;
	fbGetPivot  : GetPivot;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="DoPlanning" Id="{ee73dc54-bcd6-4d71-a46f-8731dba5a97d}">
      <Declaration><![CDATA[METHOD PUBLIC DoPlanning : BOOL
VAR_INPUT
	count : UDINT;
END_VAR
VAR
	i, j  : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF count = 0 THEN
	isFinished := FALSE;
	Initialize();
END_IF

TrjPlanning();

IF quit_flag THEN
	isFinished := TRUE;
	quit_flag := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{44603bac-51dd-45ce-8152-e92b68afbe0f}">
      <Declaration><![CDATA[METHOD PUBLIC Initialize : BOOL
VAR_INPUT
END_VAR
VAR
	i, j : INT;
	sum_height : LREAL := 0;
	leg_pos    : ARRAY[0..2] OF LREAL;
	
	Rb : Mat3;
	hip_pos_j  : Vec3;
	leg_pos_wrt_com : Vec3;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Rleg[0]:=SetMat3(1,0,0,0,0,-1,0,1,0);
Rleg[1]:=SetMat3(-1,0,0,0,0,1,0,1,0,);
Rleg[2]:=SetMat3(-1,0,0,0,0,1,0,1,0);
Rleg[3]:=SetMat3(-1,0,0,0,0,1,0,1,0);
Rleg[4]:=SetMat3( -1,0,0,0,0,1,0,1,0);
Rleg[5]:=SetMat3(1,0,0,0,0,-1,0,1,0);

quit_flag  := FALSE;
gait_cycle := 0;
height:=gvl.ReduceDistance;

FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		(*IF ABS(gvl.jntLastRefPos[i, j] - gvl.jntActualPos[i, j]) < gvl.lift_threshold_value THEN
			joint_ref_pos_init[i].data[j] := gvl.jntLastRefPos[i, j];
		ELSE
			joint_ref_pos_init[i].data[j] := gvl.jntActualPos[i, j];
		END_IF*)
		
		joint_ref_pos_init[i].data[j] := gvl.jntLastRefPos[i, j];
		jointPosLast[i,j]:=joint_ref_pos_init[i].data[j];
	END_FOR
END_FOR

sum_height := 0;
FOR j := 0 TO 5 DO
	// FK
	gvl.legCtrl[j].ForwardKinetics(motorAngles := joint_ref_pos_init[j].data, legIndex:=j, tipPosition => leg_pos);
	leg_ref_pos_init_wrt_hip[j] := SetVec3(leg_pos[0], leg_pos[1], leg_pos[2]);
	sum_height := sum_height - leg_ref_pos_init_wrt_hip[j].data[1];
END_FOR
body_ref_pos_init := SetVec3(0, 0, sum_height/6.0);
body_ref_ang_init := SetVec3(0, 0, 0);                            

FOR j := 0 TO 5 DO
	fbRotMat(yaw := body_ref_ang_init.data[2],
             pitch := body_ref_ang_init.data[1],
             roll := body_ref_ang_init.data[0],
             rm => Rb );
	hip_pos_j := SetVec3(hip_pos[j, 0], hip_pos[j, 1], hip_pos[j, 2]);
	leg_pos_wrt_com := VecAdd(MatMulVec(Rleg[j], leg_ref_pos_init_wrt_hip[j]), hip_pos_j);
    leg_ref_pos_init[j] := VecAdd(body_ref_pos_init, MatMulVec(Rb, leg_pos_wrt_com));
END_FOR

body_ref_pos := body_ref_pos_init;
body_ref_ang := body_ref_ang_init;
leg_ref_pos := leg_ref_pos_init;
leg_ref_pos_wrt_hip := leg_ref_pos_init_wrt_hip;

FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		jointPosTarget[i, j] := joint_ref_pos_init[i].data[j];
		jointVelTarget[i, j] := 0;
		jointFceTarget[i, j] := 0;
	END_FOR
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetLiftHeight" Id="{d0dd1a94-084d-42fa-b1b3-5c09f4e4b5af}">
      <Declaration><![CDATA[METHOD PUBLIC SetLiftHeight : BOOL
VAR_INPUT
	lift_height : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[height := lift_height;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrjPlanning" Id="{4d25d7a5-099c-40f8-a996-17ed2b239c7b}">
      <Declaration><![CDATA[METHOD PUBLIC TrjPlanning : BOOL
VAR_INPUT
END_VAR
VAR
	tr : LREAL;
	i, j : INT;
	Rb : Mat3;
	hip_pos_j : Vec3;
	leg_ref_pos_wrt_com_j : Vec3;
	tmp : Vec3;
	tip_pos, tip_vel : Vec3;
	
	body_ref_pos_start : Vec3;
	body_ref_pos_end : Vec3;
	jointTmpPosLast: ARRAY[0..2] OF LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
gait_cycle := gait_cycle + 1;

tr  := UDINT_TO_LREAL(gait_cycle - 0) / gvl.sampleRate / tTotal;
fbGetPivot(tNow := tr, tTotal := 1.0, pivot => pvt);

leg_ref_pos_next := leg_ref_pos_init;
body_ref_ang_next := body_ref_ang_init;

// move body pos
body_ref_pos_start := body_ref_pos_init;
body_ref_pos_end := body_ref_pos_start;
body_ref_pos_end.data[2] := body_ref_pos_end.data[2] + height;

body_ref_pos_next := VecAdd(VecMulNum(body_ref_pos_start, (1 - pvt)), VecMulNum(body_ref_pos_end, pvt));

// transform TO leg local frame AND DO inverse kinematics

FOR j := 0 TO 5 DO
	fbRotMat(
    	yaw := body_ref_ang_next.data[2], 
		pitch := body_ref_ang_next.data[1], 
		roll := body_ref_ang_next.data[0], 
		rm => Rb);
	hip_pos_j := SetVec3(hip_pos[j, 0], hip_pos[j, 1], hip_pos[j, 2]);

	//leg_ref_pos_wrt_com = Rb' * (leg_ref_pos - body_ref_pos)
	leg_ref_pos_wrt_com_j := MatMulVec(
		                         MatTranspose(Rb),
								 VecAdd(
									 leg_ref_pos_next[j],
									 VecNeg(body_ref_pos_next)
                                 )
                             );
	// leg_ref_pos_wrt_hip = Rleg' * (leg_ref_pos_wrt_com_j - hip_pos)
	leg_ref_pos_next_wrt_hip[j] := MatMulVec(
		                               MatTranspose(Rleg[j]),
									   VecAdd(
										   leg_ref_pos_wrt_com_j,
										   VecNeg(hip_pos_j)
									   )
								   );
								   
	leg_ref_vel_next_wrt_hip[j] := VecMulNum(VecAdd(leg_ref_pos_next_wrt_hip[j], VecNeg(leg_ref_pos_wrt_hip[j])), DINT_TO_LREAL(gvl.sampleRate));
END_FOR


// mapping to actual joints
FOR j := 0 TO 5 DO
	tmp := leg_ref_pos_next_wrt_hip[leg_index_mapping[j]-1];
	tip_pos := SetVec3(tmp.data[0], tmp.data[1], tmp.data[2]);
	tmp := leg_ref_vel_next_wrt_hip[leg_index_mapping[j]-1];
	tip_vel := SetVec3(tmp.data[0], tmp.data[1], tmp.data[2]);
	FOR i := 0 TO 2 DO
		jointTmpPosLast[i]:=jointPosLast[j,i];
	END_FOR		
	gvl.legCtrl[j].InversePosAndVel(
		tipPos := tip_pos.data, 
		tipVel := tip_vel.data, 
		refPosLast:=jointTmpPosLast,
		legIndex:=j,
		jntPos => joint_ref_pos[j].data, 
		jntVel => joint_ref_vel[j].data);
	
END_FOR

// link to physical outputs
FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		jointPosTarget[i, j] := joint_ref_pos[i].data[j];
		jointPosLast[i,j]:=jointPosTarget[i, j] ;
		gvl.jntRefPosLastPlanning[i,j]:=jointPosTarget[i, j] ;
		jointVelTarget[i, j] := joint_ref_vel[i].data[j];
		jointFceTarget[i, j] := 0;
	END_FOR
END_FOR

// store refs for next loop
body_ref_pos := body_ref_pos_next;
body_ref_ang := body_ref_ang_next;
leg_ref_pos := leg_ref_pos_next;
leg_ref_pos_wrt_hip := leg_ref_pos_next_wrt_hip;

IF gait_cycle > tTotal * gvl.sampleRate THEN
	quit_flag := TRUE;
	
	IF gvl.IsRest=TRUE or gvl.IsWork=TRUE THEN
		gvl.LiftBodyEndFlag:=TRUE;
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="LiftBodyGait">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="LiftBodyGait.DoPlanning">
      <LineId Id="72" Count="0" />
      <LineId Id="45" Count="3" />
      <LineId Id="50" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="LiftBodyGait.Initialize">
      <LineId Id="123" Count="4" />
      <LineId Id="8" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="22" Count="7" />
      <LineId Id="155" Count="1" />
      <LineId Id="141" Count="0" />
      <LineId Id="30" Count="21" />
      <LineId Id="88" Count="3" />
      <LineId Id="87" Count="0" />
      <LineId Id="64" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="LiftBodyGait.SetLiftHeight">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="LiftBodyGait.TrjPlanning">
      <LineId Id="17" Count="0" />
      <LineId Id="141" Count="1" />
      <LineId Id="18" Count="2" />
      <LineId Id="58" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="156" Count="1" />
      <LineId Id="159" Count="2" />
      <LineId Id="158" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="77" Count="37" />
      <LineId Id="186" Count="1" />
      <LineId Id="115" Count="3" />
      <LineId Id="188" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="119" Count="2" />
      <LineId Id="123" Count="5" />
      <LineId Id="189" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="129" Count="8" />
      <LineId Id="5" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="240" Count="3" />
      <LineId Id="245" Count="0" />
      <LineId Id="169" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>