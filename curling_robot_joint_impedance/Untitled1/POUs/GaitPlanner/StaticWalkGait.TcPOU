<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="StaticWalkGait" Id="{14489f75-91d7-4629-9640-757be7e9ec8a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK StaticWalkGait
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	//input
	H:LREAL :=0.09;//step height
	L:LREAL :=0.1;//step length
	La:lreal :=0;// lateral step length
	period:LREAL:=2;
	
	N:INT :=1;//total steps  number
	Yaw:LREAL :=0;// total Yaw angle (unit:degree)
	
	//intermediate variable
	quit_flag  : BOOL;
	require_stop_flag:BOOL;
	start_flag:BOOL;
	BodyHeight:LREAL;//body height
	SampleRate :UDINT :=1000;
	totalcount:DINT :=TRUNC(period*SampleRate);//duration time of half step
	delta_t:LREAL :=1.0/SampleRate;//sample time
	dYaw:LREAL :=Yaw/(2.0*N);// rotation angle in every half step
	gait_cycle   : UDINT := 0;//count time from select this step
	period_count :UDINT := 0;
	SupportLegA:INT :=1;// legs of group A are supporting and ones of group B are swing
	SupportLegB:INT :=2;// legs of group B are supporting and ones of group A are swing
	SupportLegAB:INT :=3;// legs of group A and B are supporting 
	SupportPhase:INT;
		// trajectory planning
	joint_ref_pos_init : ARRAY[0..5] OF Vec3;
	joint_ref_pos_target : ARRAY[0..5] OF Vec3;
	
	body_ref_pos_init : Vec3;
	body_ref_pos_target : Vec3;
	body_ref_ang_init : Vec3;
	body_ref_ang_target : Vec3;
    leg_ref_pos_init : ARRAY[0..5] OF Vec3;
	jointPosLast   : ARRAY[0..5, 0..2] OF LREAL; 
	leg_ref_pos_target:ARRAY[0..5] OF Vec3;
	leg_ref_pos_init_wrt_hip : ARRAY[0..5] OF Vec3;
	leg_ref_pos_target_wrt_hip : ARRAY[0..5] OF Vec3;

	body_ref_pos : Vec3;
	body_ref_ang : Vec3;
	body_ref_vel:vec3;
	body_ref_angvel:vec3;
	
    leg_ref_pos : ARRAY[0..5] OF Vec3;
	leg_ref_pos_wrt_hip : ARRAY[0..5] OF Vec3;
	
	body_ref_pos_next : Vec3;
	body_ref_ang_next : Vec3;
    leg_ref_pos_next : ARRAY[0..5] OF Vec3;
	leg_ref_pos_next_wrt_hip : ARRAY[0..5] OF Vec3;
	leg_ref_vel_next_wrt_hip : ARRAY[0..5] OF Vec3;
	
	jointPosTarget  : ARRAY[0..5, 0..2] OF LREAL; 
	jointVelTarget  : ARRAY[0..5, 0..2] OF LREAL;  
	jointFceTarget  : ARRAY[0..5, 0..2] OF LREAL;  
	
	fbRotmat : RotM;
	Rb : Mat3;
	hip_pos_j  : Vec3;
	leg_pos_wrt_com : Vec3;
	Rleg : ARRAY[0..5] OF Mat3;
	Rb_actual : Mat3;
	tip_actual_pos_wrt_world : ARRAY[0..5] OF Vec3;
	
	// robot paramates
	hip_pos : ARRAY[0..5, 0..2] OF LREAL := [-0.369,  -0.125, 0,
                                             0,  -0.28, 0,
                                             0.36, -0.125, 0,
                                             0.36, 0.125, 0,
											 0,0.28,0,
											 -0.369,0.125,0];
	
	//outpot
	isFinished      : BOOL := FALSE;
		
	leg_index_mapping : ARRAY[0..5] OF INT := [1, 2, 3, 4,5,6];
			// output test
	joint_ref_pos   : ARRAY[0..5] OF Vec3;
	joint_ref_vel   : ARRAY[0..5] OF Vec3;
	joint_ref_fce   : ARRAY[0..5] OF Vec3; 
	hip_ref_pos_init: ARRAY[0..5] OF vec3;
	
	joint_ref_pos_last : ARRAY[0..5] OF Vec3;
	joint_ref_vel_diff : ARRAY[0..5] OF Vec3;
	Rb_target1 : Mat3;
	Rb_target2 : Mat3;
	hip_ref_pos_rot: ARRAY[0..5] OF vec3;
	leg_ref_pos_rot:ARRAY[0..5] OF vec3;
	leg_ref_pos_wrt_body:ARRAY[0..5] OF vec3;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="BodyStabilize" Id="{95fed41a-a306-45cb-b08d-a5261fc2b054}">
      <Declaration><![CDATA[METHOD BodyStabilize : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="DoPlanning" Id="{435dc63f-0a48-4c33-a1cb-23b12568ec3d}">
      <Declaration><![CDATA[METHOD DoPlanning : BOOL
VAR_INPUT
	count: UDINT;
END_VAR

VAR
	i: INT;
	j: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF count = 0 THEN
	isFinished := FALSE;
	Initialize();
	totalcount :=TRUNC(period*SampleRate);//duration time of half step
	dYaw:=Yaw/(2.0*N)*pi/180;
	IF Yaw=0 THEN
		La:=La;
	ELSE
		La:=0;
	END_IF
END_IF
StateMachine();
BodyStabilize();
TrjPlanning();

// count
gait_cycle := gait_cycle + 1;
IF require_stop_flag=TRUE THEN
	isFinished := TRUE;
	quit_flag := FALSE;
	gait_cycle:=0;
	// link to physical outputs
	FOR i := 0 TO 5 DO
		FOR j := 0 TO 2 DO
			jointPosTarget[i, j] := joint_ref_pos[i].data[j];
			jointVelTarget[i, j] := 0;
			jointFceTarget[i, j] := 0;
		END_FOR
	END_FOR
END_IF

IF quit_flag AND SupportPhase = SupportLegAB THEN
	isFinished := TRUE;
	quit_flag := FALSE;
	gait_cycle:=0;
END_IF


]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{3dce514c-2df9-4946-a3fc-aadbb44b1855}">
      <Declaration><![CDATA[METHOD Initialize : BOOL
VAR_INPUT
END_VAR
VAR
	i, j : INT;
	sum_height : LREAL := 0;
	leg_pos    : ARRAY[0..2] OF LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Rleg[0]:=SetMat3(1,0,0,0,0,-1,0,1,0);
Rleg[1]:=SetMat3(-1,0,0,0,0,1,0,1,0,);
Rleg[2]:=SetMat3(-1,0,0,0,0,1,0,1,0);
Rleg[3]:=SetMat3(-1,0,0,0,0,1,0,1,0);
Rleg[4]:=SetMat3( -1,0,0,0,0,1,0,1,0);
Rleg[5]:=SetMat3(1,0,0,0,0,-1,0,1,0);

SupportPhase:=SupportLegAB;
quit_flag :=FALSE;
require_stop_flag:=false;
gait_cycle := 0;

// init trajectory
FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		IF ABS(gvl.jntLastRefPos[i, j] - gvl.jntActualPos[i, j]) < gvl.walk_threshold_value THEN//gvl.jntLastRefPos上次规划值，或者力控开始时的值
			joint_ref_pos_init[i].data[j] := gvl.jntLastRefPos[i, j];
		ELSE
			joint_ref_pos_init[i].data[j] := gvl.jntActualPos[i, j];
		END_IF
		jointPosLast[i,j]:=joint_ref_pos_init[i].data[j];
	END_FOR
END_FOR

sum_height := 0;
FOR j := 0 TO 5 DO
	// FK
	gvl.legCtrl[j].ForwardKinetics(motorAngles := joint_ref_pos_init[j].data,legIndex:=j, tipPosition => leg_pos);
	leg_ref_pos_init_wrt_hip[j] := SetVec3(leg_pos[0], leg_pos[1], leg_pos[2]);
	sum_height := sum_height + (-leg_ref_pos_init_wrt_hip[j].data[1]);
END_FOR
body_ref_pos_init := SetVec3(0, 0, sum_height/6.0);
body_ref_ang_init := SetVec3(gvl.rpy_model[0], gvl.rpy_model[1], 0);                            

fbRotMat(yaw := 0, 
	     pitch := gvl.rpy_model[1],
		 roll := gvl.rpy_model[0],
		 rm => Rb_actual);
FOR j:=0 TO 5 DO
		hip_pos_j := SetVec3(hip_pos[j, 0], hip_pos[j, 1], hip_pos[j, 2]);
		hip_ref_pos_init[j]:=VecAdd(MatMulVec(Rb_actual,hip_pos_j ),body_ref_pos_init);	
END_FOR
FOR j := 0 TO 5 DO
	hip_pos_j := SetVec3(hip_pos[j, 0], hip_pos[j, 1], hip_pos[j, 2]);
	leg_pos_wrt_com := VecAdd(MatMulVec(Rleg[j], leg_ref_pos_init_wrt_hip[j]), hip_pos_j);
    leg_ref_pos_init[j] := VecAdd(body_ref_pos_init, MatMulVec(Rb_actual, leg_pos_wrt_com));
END_FOR

body_ref_pos := body_ref_pos_init;
body_ref_ang := body_ref_ang_init;
leg_ref_pos := leg_ref_pos_init;
leg_ref_pos_wrt_hip := leg_ref_pos_init_wrt_hip;

FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		jointPosTarget[i, j] := joint_ref_pos_init[i].data[j];
		jointVelTarget[i, j] := 0;
		jointFceTarget[i, j] := 0;
	END_FOR
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine" Id="{8843ca34-84d0-40fd-abf3-fe61f5e47d52}">
      <Declaration><![CDATA[METHOD StateMachine : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[period_count:=gait_cycle MOD totalcount;
 
IF gait_cycle/totalcount = 0 THEN
	SupportPhase:=SupportLegA;
ELSIF gait_cycle/totalcount=2*N-1 THEN
	SupportPhase:=SupportLegB;
ELSIF (gait_cycle/totalcount MOD 2)=1 THEN
	SupportPhase:=SupportLegB;
ELSE
	SupportPhase:=SupportLegA;
END_IF
IF gait_cycle>=2*N*totalcount THEN
	SupportPhase:=SupportLegAB;
	quit_flag:=TRUE;
END_IF
 ]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrjPlanning" Id="{10879d0b-e5db-4d8c-9fed-20ea1fa46ed9}">
      <Declaration><![CDATA[METHOD TrjPlanning : BOOL
VAR_INPUT
END_VAR

VAR
	i: INT;
	j: INT;
	temp :vec3;
	temp1: Vec3;
	temp2: Vec3;
	temp3: Vec3;
	tmp:vec3;
	tip_pos, tip_vel : Vec3;
	fbElipseInterpolation:ElipseInterpolation;
	fbHermitInterpolation:HermitInterpolation;
	body_ref_vel_init: Vec3;
	body_ref_angvel_init:vec3;
	body_ref_vel_target: Vec3;
	body_ref_angvel_target:vec3;
	leg_ref_pos_wrt_com_j : Vec3;
	stopflag: BOOL;
	
	jointTmpPosLast: ARRAY[0..2] OF LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF gait_cycle/totalcount = 0 THEN
	//the first step
	//update target toe position 
	FOR i:=0 TO 5  BY 2 DO //0-2-4 support
		FOR j:=0 TO 2  DO
			leg_ref_pos_target[i].data[j]:=leg_ref_pos_init[i].data[j];
		END_FOR
	END_FOR
	temp:=SetVec3(L/2*COS(dYaw),L/2*SIN(dYaw)+La/2,0);
	fbRotMat(yaw := 2*dYaw, pitch := 0, roll := 0, rm => Rb_target2);
	fbRotMat(yaw := 0, pitch := 0,roll := 0,rm => Rb_target1);
	FOR j:=0 TO 5 DO
		leg_ref_pos_wrt_body[j]:= MatMulVec( MatTranspose(Rb_target1), VecAdd(leg_ref_pos_init[j],VecNeg(body_ref_pos_init)));
		leg_ref_pos_rot[j]:=VecAdd( MatMulVec(Rb_target2,leg_ref_pos_wrt_body[j] ),VecNeg(MatMulVec(Rb_target1,leg_ref_pos_wrt_body[j])));
	END_FOR
		 
	FOR i:=1 TO 5 BY 2 DO //1-3-5 swing
		FOR j:=0 TO 1  DO
			leg_ref_pos_target[i].data[j]:=leg_ref_pos_init[i].data[j]+temp.data[j]+leg_ref_pos_rot[i].data[j];
		END_FOR
		leg_ref_pos_target[i].data[2]:=leg_ref_pos_init[i].data[2]+temp.data[2];
	END_FOR
	//update body target position
	temp1:=SetVec3(L/4*COS(dYaw),L/4*SIN(dYaw)+La/4,0);
	temp2:=SetVec3(0,0,dYaw);
	FOR i:=0 TO 2 DO
		body_ref_pos_target.data[i]:=body_ref_pos_init.data[i]+temp1.data[i];
		body_ref_ang_target.data[i]:=body_ref_ang_init.data[i]+temp2.data[i];
	END_FOR
	//update body velocity
	body_ref_vel_init:=setvec3(0,0,0);
	body_ref_angvel_init:=setvec3(0,0,0);
	body_ref_vel_target:=setvec3(0.5*L/(totalcount*delta_t)*COS(dYaw),0.5*L/(totalcount*delta_t)*SIN(dYaw)+0.5*La/(totalcount*delta_t),0);
	body_ref_angvel_target:=setvec3(0,0,dYaw/(totalcount*delta_t));
	// planing toe trajectory
	FOR i:=0 TO 5 BY 2 DO//0-2-4 support
		FOR j:=0 TO 2 DO 
			leg_ref_pos[i].data[j]:=leg_ref_pos_init[i].data[j];
		END_FOR
	END_FOR
	FOR i:=1 TO 5 BY 2 DO//1-3-5 swing
		fbElipseInterpolation(x0:=leg_ref_pos_init[i].data[0] , y0:=leg_ref_pos_init[i].data[1] , z0:=leg_ref_pos_init[i].data[2] , x1:=leg_ref_pos_target[i].data[0] , 
		y1:=leg_ref_pos_target[i].data[1] , z1:=leg_ref_pos_target[i].data[2] , h:=H , T:=totalcount*delta_t , t0:=0 , tNow:= period_count*delta_t, 
		x=>leg_ref_pos[i].data[0] , y=>leg_ref_pos[i].data[1] , z=>leg_ref_pos[i].data[2] );
	END_FOR
	// planing body trajectory
	FOR i:=0 TO 2 DO
		fbHermitInterpolation(t0:=0 , T:=totalcount*delta_t , y0:=body_ref_pos_init.data[i] , y1:=body_ref_pos_target.data[i] , v0:=body_ref_vel_init.data[i] , 
		v1:=body_ref_vel_target.data[i] , tNow:=period_count*delta_t , y=>body_ref_pos.data[i] , v=> body_ref_vel.data[i]);
		fbHermitInterpolation(t0:=0 , T:=totalcount*delta_t , y0:=body_ref_ang_init.data[i] , y1:=body_ref_ang_target.data[i] , v0:=body_ref_angvel_init.data[i] , 
		v1:=body_ref_angvel_target.data[i] , tNow:=period_count*delta_t , y=>body_ref_ang.data[i] , v=> body_ref_angvel.data[i]);		
	END_FOR
	
ELSIF gait_cycle/totalcount= 2*N-1 THEN
	//the last step
	IF period_count=0 THEN
		leg_ref_pos_init:=leg_ref_pos_target;
		body_ref_pos_init:=body_ref_pos_target;
		body_ref_ang_init:=body_ref_ang_target;
	END_IF
	//update target toe position 
	temp:=SetVec3(L/2*COS(dYaw),L/2*SIN(dYaw)+La/2,0);
	fbRotMat(yaw := 2*dYaw, pitch := 0,roll := 0,rm => Rb_target2);
	fbRotMat(yaw := 0, pitch := 0,roll := 0,rm => Rb_target1);
	FOR j:=0 TO 5 DO
		leg_ref_pos_wrt_body[j]:= MatMulVec( MatTranspose(Rb_target1), VecAdd(leg_ref_pos_init[j],VecNeg(body_ref_pos_init)));
		leg_ref_pos_rot[j]:=VecAdd( MatMulVec(Rb_target2,leg_ref_pos_wrt_body[j] ),VecNeg(MatMulVec(Rb_target1,leg_ref_pos_wrt_body[j])));	
	END_FOR
	FOR i:=0 TO 5  BY 2 DO //0-2-4 swing target position
		FOR j:=0 TO 2  DO
			leg_ref_pos_target[i].data[j]:=leg_ref_pos_init[i].data[j]+temp.data[j]+leg_ref_pos_rot[i].data[j];
		END_FOR
	END_FOR
	
	FOR i:=1 TO 5 BY 2 DO //1-3-5 support
		FOR j:=0 TO 2  DO
			leg_ref_pos_target[i].data[j]:=leg_ref_pos_init[i].data[j];
		END_FOR
	END_FOR
	//update body target position	
	temp1:=SetVec3(L/4*COS(dYaw),L/4*SIN(dYaw)+La/4,0);
	temp2:=SetVec3(0,0,dYaw);
	FOR i:=0 TO 2 DO
		body_ref_pos_target.data[i]:=body_ref_pos_init.data[i]+temp1.data[i];
		body_ref_ang_target.data[i]:=body_ref_ang_init.data[i]+temp2.data[i];
	END_FOR
	//update body velocity
	body_ref_vel_target:=setvec3(0,0,0);
	body_ref_angvel_target:=setvec3(0,0,0);
	body_ref_vel_init:=setvec3(0.5*L/(totalcount*delta_t)*COS(dYaw),0.5*L/(totalcount*delta_t)*SIN(dYaw)+0.5*La/(totalcount*delta_t),0);
	body_ref_angvel_init:=setvec3(0,0,dYaw/(totalcount*delta_t));
	// planing toe trajectory
	FOR i:=0 TO 5 BY 2 DO//swing
		FOR j:=0 TO 2 DO 
		fbElipseInterpolation(x0:=leg_ref_pos_init[i].data[0] , y0:=leg_ref_pos_init[i].data[1] , z0:=leg_ref_pos_init[i].data[2] , x1:=leg_ref_pos_target[i].data[0] , 
		y1:=leg_ref_pos_target[i].data[1] , z1:=leg_ref_pos_target[i].data[2] , h:=H , T:=totalcount*delta_t , t0:=0 , tNow:= period_count*delta_t, 
		x=>leg_ref_pos[i].data[0] , y=>leg_ref_pos[i].data[1] , z=>leg_ref_pos[i].data[2] );
		END_FOR
	END_FOR	
	FOR i:=1 TO 5 BY 2 DO//support
		FOR j:=0 TO 2 DO 
			leg_ref_pos[i].data[j]:=leg_ref_pos_init[i].data[j];
		END_FOR
	END_FOR
	// planing body trajectory
	FOR i:=0 TO 2 DO
		fbHermitInterpolation(t0:=0 , T:=totalcount*delta_t , y0:=body_ref_pos_init.data[i] , y1:=body_ref_pos_target.data[i] , v0:=body_ref_vel_init.data[i] , 
		v1:=body_ref_vel_target.data[i] , tNow:=period_count*delta_t , y=>body_ref_pos.data[i] , v=> body_ref_vel.data[i]);
		fbHermitInterpolation(t0:=0 , T:=totalcount*delta_t , y0:=body_ref_ang_init.data[i] , y1:=body_ref_ang_target.data[i] , v0:=body_ref_angvel_init.data[i] , 
		v1:=body_ref_angvel_target.data[i] , tNow:=period_count*delta_t , y=>body_ref_ang.data[i] , v=> body_ref_angvel.data[i]);		
	END_FOR	
ELSIF (gait_cycle/totalcount) MOD 2 =1 THEN
	// constant velocity stage ,group A: 0-2-4 swing, group B: 1-3-5 support
	IF period_count=0 THEN
		leg_ref_pos_init:=leg_ref_pos_target;
		body_ref_pos_init:=body_ref_pos_target;
		body_ref_ang_init:=body_ref_ang_target;
	END_IF
	//update target toe position 
	temp:=SetVec3(L*COS(dYaw),L*SIN(dYaw)+La,0);
	fbRotMat(yaw := 2*dYaw, pitch := 0,roll := 0,rm => Rb_target2);
	fbRotMat(yaw := 0, pitch := 0,roll := 0,rm => Rb_target1);
	FOR j:=0 TO 5 DO
		leg_ref_pos_wrt_body[j]:= MatMulVec( MatTranspose(Rb_target1), VecAdd(leg_ref_pos_init[j],VecNeg(body_ref_pos_init)));
		leg_ref_pos_rot[j]:=VecAdd( MatMulVec(Rb_target2,leg_ref_pos_wrt_body[j] ),VecNeg(MatMulVec(Rb_target1,leg_ref_pos_wrt_body[j])));		
	END_FOR
	
	FOR i:=0 TO 5  BY 2 DO 
		FOR j:=0 TO 2  DO
			leg_ref_pos_target[i].data[j]:=leg_ref_pos_init[i].data[j]+temp.data[j]+leg_ref_pos_rot[i].data[j];
		END_FOR
	END_FOR

	FOR i:=1 TO 5 BY 2 DO
		FOR j:=0 TO 2  DO
			leg_ref_pos_target[i].data[j]:=leg_ref_pos_init[i].data[j];
		END_FOR
	END_FOR
	//update body target position	
	temp1:=SetVec3(L/2*COS(dYaw),L/2*SIN(dYaw)+La/2,0);
	temp2:=SetVec3(0,0,dYaw);
	FOR i:=0 TO 2 DO
		body_ref_pos_target.data[i]:=body_ref_pos_init.data[i]+temp1.data[i];
		body_ref_ang_target.data[i]:=body_ref_ang_init.data[i]+temp2.data[i];
	END_FOR
	// planing toe trajectory
	FOR i:=0 TO 5 BY 2 DO//swing
		FOR j:=0 TO 2 DO 
		fbElipseInterpolation(x0:=leg_ref_pos_init[i].data[0] , y0:=leg_ref_pos_init[i].data[1] , z0:=leg_ref_pos_init[i].data[2] , x1:=leg_ref_pos_target[i].data[0] , 
		y1:=leg_ref_pos_target[i].data[1] , z1:=leg_ref_pos_target[i].data[2] , h:=H , T:=totalcount*delta_t , t0:=0 , tNow:= period_count*delta_t, 
		x=>leg_ref_pos[i].data[0] , y=>leg_ref_pos[i].data[1] , z=>leg_ref_pos[i].data[2] );
		END_FOR
	END_FOR	
	FOR i:=1 TO 5 BY 2 DO//support
		FOR j:=0 TO 2 DO 
			leg_ref_pos[i].data[j]:=leg_ref_pos_init[i].data[j];
		END_FOR
	END_FOR
	// planing body trajectory
	temp1:=SetVec3(0.5*L/totalcount*period_count*COS(dYaw),0.5*L/totalcount*period_count*SIN(dYaw)+0.5*La/totalcount*period_count,0);
	temp2:=SetVec3(0,0,dYaw/totalcount*period_count);		
	FOR i:=0 TO 2 DO
		body_ref_pos.data[i]:=body_ref_pos_init.data[i]+temp1.data[i];
		body_ref_ang.data[i]:=body_ref_ang_init.data[i]+temp2.data[i];
	END_FOR
ELSE 
	// constant velocity stage ,group B swing, group A support
	IF period_count=0 THEN
		leg_ref_pos_init:=leg_ref_pos_target;
		body_ref_pos_init:=body_ref_pos_target;
		body_ref_ang_init:=body_ref_ang_target;
	END_IF
	//update target toe position 
	temp:=SetVec3(L*COS(dYaw),L*SIN(dYaw)+La,0);
	fbRotMat(yaw := 2*dYaw, pitch := 0,roll := 0,rm => Rb_target2);
	fbRotMat(yaw := 0, pitch := 0,roll := 0,rm => Rb_target1);
	FOR j:=0 TO 5 DO
		leg_ref_pos_wrt_body[j]:= MatMulVec( MatTranspose(Rb_target1), VecAdd(leg_ref_pos_init[j],VecNeg(body_ref_pos_init)));
		leg_ref_pos_rot[j]:=VecAdd( MatMulVec(Rb_target2,leg_ref_pos_wrt_body[j] ),VecNeg(MatMulVec(Rb_target1,leg_ref_pos_wrt_body[j])));	
	END_FOR
	FOR i:=0 TO 5  BY 2 DO 
		FOR j:=0 TO 2  DO
			leg_ref_pos_target[i].data[j]:=leg_ref_pos_init[i].data[j];
		END_FOR
	END_FOR
	FOR i:=1 TO 5 BY 2 DO
		FOR j:=0 TO 2  DO
			leg_ref_pos_target[i].data[j]:=leg_ref_pos_init[i].data[j]+temp.data[j]+leg_ref_pos_rot[i].data[j];
		END_FOR
	END_FOR
	//update body target position	
	temp1:=SetVec3(L/2*COS(dYaw),L/2*SIN(dYaw)+La/2,0);
	temp2:=SetVec3(0,0,dYaw);
	FOR i:=0 TO 2 DO
		body_ref_pos_target.data[i]:=body_ref_pos_init.data[i]+temp1.data[i];
		body_ref_ang_target.data[i]:=body_ref_ang_init.data[i]+temp2.data[i];
	END_FOR
	// planing toe trajectory
	FOR i:=0 TO 5 BY 2 DO//swing
		FOR j:=0 TO 2 DO 
		leg_ref_pos[i].data[j]:=leg_ref_pos_init[i].data[j];
		END_FOR
	END_FOR	
	FOR i:=1 TO 5 BY 2 DO//support
		FOR j:=0 TO 2 DO 
		fbElipseInterpolation(x0:=leg_ref_pos_init[i].data[0] , y0:=leg_ref_pos_init[i].data[1] , z0:=leg_ref_pos_init[i].data[2] , x1:=leg_ref_pos_target[i].data[0] , 
		y1:=leg_ref_pos_target[i].data[1] , z1:=leg_ref_pos_target[i].data[2] , h:=H , T:=totalcount*delta_t , t0:=0 , tNow:= period_count*delta_t, 
		x=>leg_ref_pos[i].data[0] , y=>leg_ref_pos[i].data[1] , z=>leg_ref_pos[i].data[2] );
		END_FOR
	END_FOR
	// planing body trajectory
	temp1:=SetVec3(0.5*L/totalcount*period_count*COS(dYaw),0.5*L/totalcount*period_count*SIN(dYaw)+0.5*La/totalcount*period_count,0);
	temp2:=SetVec3(0,0,dYaw/totalcount*period_count);		
	FOR i:=0 TO 2 DO
		body_ref_pos.data[i]:=body_ref_pos_init.data[i]+temp1.data[i];
		body_ref_ang.data[i]:=body_ref_ang_init.data[i]+temp2.data[i];
	END_FOR
END_IF

IF gait_cycle=2*N*totalcount THEN
	leg_ref_pos_init:=leg_ref_pos_target;
	body_ref_pos_init:=body_ref_pos_target;
	body_ref_ang_init:=body_ref_ang_target;
END_IF

// transform TO leg local frame AND DO inverse kinematics
IF gait_cycle=4000 THEN
	stopflag:=TRUE;
END_IF
FOR j := 0 TO 5 DO
	fbRotMat(
    	yaw := body_ref_ang.data[2], 
		pitch := body_ref_ang.data[1], 
		roll := body_ref_ang.data[0], 
		rm => Rb);
	hip_pos_j := SetVec3(hip_pos[j, 0], hip_pos[j, 1], hip_pos[j, 2]);

	//leg_ref_pos_wrt_com = Rb' * (leg_ref_pos - body_ref_pos)
	leg_ref_pos_wrt_com_j := MatMulVec(
		                         MatTranspose(Rb),
								 VecAdd(
									 leg_ref_pos[j],
									 VecNeg(body_ref_pos)
                                 )
                             );
	// leg_ref_pos_wrt_hip = Rleg' * (leg_ref_pos_wrt_com_j - hip_pos)
	leg_ref_pos_next_wrt_hip[j] := MatMulVec(
		                               MatTranspose(Rleg[j]),
									   VecAdd(
										   leg_ref_pos_wrt_com_j,
										   VecNeg(hip_pos_j)
									   )
								   );
								   
	leg_ref_vel_next_wrt_hip[j] := VecMulNum(VecAdd(leg_ref_pos_next_wrt_hip[j], VecNeg(leg_ref_pos_wrt_hip[j])), DINT_TO_LREAL(gvl.sampleRate));//求腿坐标系中足尖速度，前后两个周期值之差乘以采样频率
END_FOR


// mapping to actual joints
FOR j := 0 TO 5 DO
	tmp := leg_ref_pos_next_wrt_hip[leg_index_mapping[j]-1];
	tip_pos := SetVec3(tmp.data[0], tmp.data[1], tmp.data[2]);
	tmp := leg_ref_vel_next_wrt_hip[leg_index_mapping[j]-1];
	tip_vel := SetVec3(tmp.data[0], tmp.data[1], tmp.data[2]);
	FOR i := 0 TO 2 DO
		jointTmpPosLast[i]:=jointPosLast[j,i];
	END_FOR	
	
	gvl.legCtrl[j].InversePosAndVel(
		tipPos := tip_pos.data, 
		tipVel := tip_vel.data, 
		refPosLast:=jointTmpPosLast,
		legIndex:=j,
		jntPos => joint_ref_pos[j].data, 
		jntVel => joint_ref_vel[j].data);
	
END_FOR

(*
//differ position to get velocity
IF gait_cycle=0 THEN
	joint_ref_pos_last:=joint_ref_pos_init;
END_IF
FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		joint_ref_vel_diff[i].data[j]:=(joint_ref_pos[i].data[j]-joint_ref_pos_last[i].data[j])*DINT_TO_LREAL(gvl.sampleRate);
		joint_ref_pos_last[i].data[j]:=joint_ref_pos[i].data[j];
	END_FOR
END_FOR
*)

// link to physical outputs
FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		jointPosTarget[i, j] := joint_ref_pos[i].data[j];
		jointVelTarget[i, j] := joint_ref_vel[i].data[j];
		jointPosLast[i,j]:=jointPosTarget[i, j] ;
		gvl.jntRefPosLastPlanning[i,j]:=jointPosTarget[i, j] ;
		//jointVelTarget[i, j] := joint_ref_vel_diff[i].data[j];
		jointFceTarget[i, j] := 0;
	END_FOR
END_FOR

// store refs for next loop
leg_ref_pos_wrt_hip := leg_ref_pos_next_wrt_hip;































]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="StaticWalkGait">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="StaticWalkGait.BodyStabilize">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="StaticWalkGait.DoPlanning">
      <LineId Id="6" Count="2" />
      <LineId Id="53" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="65" Count="1" />
      <LineId Id="64" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="38" Count="6" />
      <LineId Id="37" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="18" Count="3" />
      <LineId Id="27" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="StaticWalkGait.Initialize">
      <LineId Id="96" Count="4" />
      <LineId Id="60" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="6" Count="7" />
      <LineId Id="110" Count="0" />
      <LineId Id="14" Count="11" />
      <LineId Id="56" Count="3" />
      <LineId Id="26" Count="0" />
      <LineId Id="85" Count="2" />
      <LineId Id="84" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="32" Count="15" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="StaticWalkGait.StateMachine">
      <LineId Id="5" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="StaticWalkGait.TrjPlanning">
      <LineId Id="702" Count="8" />
      <LineId Id="712" Count="0" />
      <LineId Id="716" Count="0" />
      <LineId Id="720" Count="0" />
      <LineId Id="1136" Count="0" />
      <LineId Id="1138" Count="0" />
      <LineId Id="723" Count="48" />
      <LineId Id="775" Count="0" />
      <LineId Id="779" Count="0" />
      <LineId Id="1139" Count="1" />
      <LineId Id="782" Count="0" />
      <LineId Id="791" Count="4" />
      <LineId Id="1141" Count="0" />
      <LineId Id="797" Count="46" />
      <LineId Id="847" Count="0" />
      <LineId Id="851" Count="0" />
      <LineId Id="1142" Count="0" />
      <LineId Id="1144" Count="0" />
      <LineId Id="854" Count="0" />
      <LineId Id="1145" Count="0" />
      <LineId Id="863" Count="4" />
      <LineId Id="869" Count="42" />
      <LineId Id="915" Count="0" />
      <LineId Id="919" Count="0" />
      <LineId Id="1146" Count="1" />
      <LineId Id="922" Count="84" />
      <LineId Id="1085" Count="1" />
      <LineId Id="1084" Count="0" />
      <LineId Id="1007" Count="3" />
      <LineId Id="1087" Count="0" />
      <LineId Id="1112" Count="0" />
      <LineId Id="1011" Count="3" />
      <LineId Id="1060" Count="0" />
      <LineId Id="1015" Count="10" />
      <LineId Id="1059" Count="0" />
      <LineId Id="1026" Count="5" />
      <LineId Id="1088" Count="0" />
      <LineId Id="1171" Count="0" />
      <LineId Id="1032" Count="5" />
      <LineId Id="133" Count="19" />
      <LineId Id="90" Count="11" />
      <LineId Id="88" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>