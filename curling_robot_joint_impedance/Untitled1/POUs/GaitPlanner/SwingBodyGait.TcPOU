<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="SwingBodyGait" Id="{60e7e8f9-5acc-4c99-b41d-0df8bbf89556}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC SwingBodyGait
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR 
	isFinished : BOOL := FALSE;
	
	body_ang_lists : ARRAY[0..8, 0..2] OF LREAL := [0.2,   0,   0,
                                                   -0.2,   0,   0,
                                                      0,   0,   0,
                                                      0, 0.2,   0,
                                                      0,-0.2,   0,
                                                      0,   0,   0,
                                                      0,   0, 0.2,
                                                      0,   0,-0.2,
                                                      0,   0,   0];
	
	time_interval_lists : ARRAY[0..8] OF LREAL := [2, 4, 2, 2, 4, 2, 2, 4, 2];
	
	// robot geometrical parameters
	hip_pos : ARRAY[0..5, 0..2] OF LREAL := [-0.369,  -0.125, 0,
                                             0,  -0.28, 0,
                                             0.36, -0.125, 0,
                                             0.36, 0.125, 0,
											 0,0.28,0,
											 -0.369,0.125,0];

	leg_index_mapping : ARRAY[0..5] OF INT := [1, 2, 3, 4,5,6];
	Rleg : ARRAY[0..5] OF Mat3;
	
	gait_cycle : DINT := 0;
	cycle_enter : DINT := 0;
	seq: INT := 0;
	quit_flag : BOOL := FALSE;
	
	joint_ref_pos_init : ARRAY[0..5] OF Vec3;
	
	body_ref_pos_init : Vec3;
	body_ref_ang_init : Vec3;
    leg_ref_pos_init : ARRAY[0..5] OF Vec3;
	leg_ref_pos_init_wrt_hip : ARRAY[0..5] OF Vec3;

	body_ref_pos : Vec3;
	body_ref_ang : Vec3;
    leg_ref_pos : ARRAY[0..5] OF Vec3;
	leg_ref_pos_wrt_hip : ARRAY[0..5] OF Vec3;
	
	body_ref_pos_next : Vec3;
	body_ref_ang_next : Vec3;
    leg_ref_pos_next : ARRAY[0..5] OF Vec3;
	leg_ref_pos_next_wrt_hip : ARRAY[0..5] OF Vec3;
	leg_ref_vel_next_wrt_hip : ARRAY[0..5] OF Vec3;
	
	// output test
	joint_ref_pos   : ARRAY[0..5] OF Vec3;
	jointPosLast   : ARRAY[0..5, 0..2] OF LREAL; 
	joint_ref_vel   : ARRAY[0..5] OF Vec3;
	
	jointPosTarget  : ARRAY[0..5, 0..2] OF LREAL; 
	jointVelTarget  : ARRAY[0..5, 0..2] OF LREAL;  
	jointFceTarget  : ARRAY[0..5, 0..2] OF LREAL;  
	
	pvt, pvtDot : LREAL;
	
	fbRotmat : RotM;
	fbGetPivot  : GetPivot;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="DoPlanning" Id="{58391654-4fb1-4db6-a97a-b07b1943c559}">
      <Declaration><![CDATA[METHOD PUBLIC DoPlanning : BOOL
VAR_INPUT
	count : UDINT;
END_VAR
VAR
	i, j  : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF count = 0 THEN
	isFinished := FALSE;
	Initialize();
END_IF

TrjPlanning();

IF quit_flag THEN
	isFinished := TRUE;
	quit_flag := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{78d0a69e-5930-4e6e-b584-f6c03c6903ce}">
      <Declaration><![CDATA[METHOD PUBLIC Initialize : BOOL
VAR_INPUT
END_VAR
VAR
	i, j : INT;
	sum_height : LREAL := 0;
	leg_pos    : ARRAY[0..2] OF LREAL;
	
	Rb : Mat3;
	hip_pos_j  : Vec3;
	leg_pos_wrt_com : Vec3;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Rleg[0]:=SetMat3(1,0,0,0,0,-1,0,1,0);
Rleg[1]:=SetMat3(-1,0,0,0,0,1,0,1,0,);
Rleg[2]:=SetMat3(-1,0,0,0,0,1,0,1,0);
Rleg[3]:=SetMat3(-1,0,0,0,0,1,0,1,0);
Rleg[4]:=SetMat3( -1,0,0,0,0,1,0,1,0);
Rleg[5]:=SetMat3(1,0,0,0,0,-1,0,1,0);

quit_flag  := FALSE;
gait_cycle := 0;
seq := 0;
cycle_enter := 0;

FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		IF ABS(gvl.jntLastRefPos[i, j] - gvl.jntActualPos[i, j]) < gvl.swing_threshold_value THEN
			joint_ref_pos_init[i].data[j] := gvl.jntLastRefPos[i, j];
		ELSE
			joint_ref_pos_init[i].data[j] := gvl.jntActualPos[i, j];
		END_IF
		jointPosLast[i,j]:=joint_ref_pos_init[i].data[j];
	END_FOR
END_FOR

sum_height := 0;
FOR j := 0 TO 5 DO
	// FK
	gvl.legCtrl[j].ForwardKinetics(motorAngles := joint_ref_pos_init[j].data,legIndex:=j, tipPosition => leg_pos);
	leg_ref_pos_init_wrt_hip[j] := SetVec3(leg_pos[0], leg_pos[1], leg_pos[2]);
	sum_height := sum_height -leg_ref_pos_init_wrt_hip[j].data[1];
END_FOR
body_ref_pos_init := SetVec3(0, 0, sum_height/6.0);
body_ref_ang_init := SetVec3(0, 0, 0);                            

FOR j := 0 TO 5 DO
	fbRotMat(yaw := body_ref_ang_init.data[2],
             pitch := body_ref_ang_init.data[1],
             roll := body_ref_ang_init.data[0],
             rm => Rb );
	hip_pos_j := SetVec3(hip_pos[j, 0], hip_pos[j, 1], hip_pos[j, 2]);
	leg_pos_wrt_com := VecAdd(MatMulVec(Rleg[j], leg_ref_pos_init_wrt_hip[j]), hip_pos_j);
    leg_ref_pos_init[j] := VecAdd(body_ref_pos_init, MatMulVec(Rb, leg_pos_wrt_com));
END_FOR

body_ref_pos := body_ref_pos_init;
body_ref_ang := body_ref_ang_init;
leg_ref_pos := leg_ref_pos_init;
leg_ref_pos_wrt_hip := leg_ref_pos_init_wrt_hip;

FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		jointPosTarget[i, j] := joint_ref_pos_init[i].data[j];
		jointVelTarget[i, j] := 0;
		jointFceTarget[i, j] := 0;
	END_FOR
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrjPlanning" Id="{1f78a82d-be8f-499c-9b29-43105ba54381}">
      <Declaration><![CDATA[METHOD PUBLIC TrjPlanning : BOOL
VAR_INPUT
END_VAR
VAR
	tr : LREAL;
	i, j : INT;
	Rb : Mat3;
	hip_pos_j : Vec3;
	leg_ref_pos_wrt_com_j : Vec3;
	tmp : Vec3;
	tip_pos, tip_vel : Vec3;
	
	body_ref_pos_start : Vec3;
	body_ref_pos_end : Vec3;
	body_ref_ang_start : Vec3;
	body_ref_ang_end : Vec3;
	
	jointTmpPosLast: ARRAY[0..2] OF LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (gait_cycle - cycle_enter) > (time_interval_lists[seq] * gvl.sampleRate) THEN
	seq := seq + 1;
	cycle_enter := gait_cycle;
	body_ref_ang_init := body_ref_ang;
	IF seq > 8 THEN
		quit_flag := TRUE;
	END_IF
END_IF 

gait_cycle := gait_cycle + 1;
leg_ref_pos_next := leg_ref_pos_init;

// fix body pos
body_ref_pos_next := body_ref_pos_init;
//body_ref_pos_next := VecAdd(VecMulNum(body_ref_pos_start, (1 - pvt)), VecMulNum(body_ref_pos_end, pvt));

// move body ang
tr  := DINT_TO_LREAL(gait_cycle - cycle_enter) / gvl.sampleRate / time_interval_lists[seq];
fbGetPivot(tNow := tr, tTotal := 1.0, pivot => pvt);
body_ref_ang_start := body_ref_ang_init;

IF seq <= 8 THEN
	body_ref_ang_end := SetVec3(body_ang_lists[seq, 0], body_ang_lists[seq, 1], body_ang_lists[seq, 2]);
ELSE
	body_ref_ang_end := body_ref_ang_start;
END_IF
body_ref_ang_next := VecAdd(VecMulNum(body_ref_ang_start, (1 - pvt)), VecMulNum(body_ref_ang_end, pvt));

// transform TO leg local frame AND DO inverse kinematics

FOR j := 0 TO 5 DO
	fbRotMat(
    	yaw := body_ref_ang_next.data[2], 
		pitch := body_ref_ang_next.data[1], 
		roll := body_ref_ang_next.data[0], 
		rm => Rb);
	hip_pos_j := SetVec3(hip_pos[j, 0], hip_pos[j, 1], hip_pos[j, 2]);

	//leg_ref_pos_wrt_com = Rb' * (leg_ref_pos - body_ref_pos)
	leg_ref_pos_wrt_com_j := MatMulVec(
		                         MatTranspose(Rb),
								 VecAdd(
									 leg_ref_pos_next[j],
									 VecNeg(body_ref_pos_next)
                                 )
                             );
	// leg_ref_pos_wrt_hip = Rleg' * (leg_ref_pos_wrt_com_j - hip_pos)
	leg_ref_pos_next_wrt_hip[j] := MatMulVec(
		                               MatTranspose(Rleg[j]),
									   VecAdd(
										   leg_ref_pos_wrt_com_j,
										   VecNeg(hip_pos_j)
									   )
								   );
								   
	leg_ref_vel_next_wrt_hip[j] := VecMulNum(VecAdd(leg_ref_pos_next_wrt_hip[j], VecNeg(leg_ref_pos_wrt_hip[j])), DINT_TO_LREAL(gvl.sampleRate));
END_FOR


// mapping to actual joints
FOR j := 0 TO 5 DO
	tmp := leg_ref_pos_next_wrt_hip[leg_index_mapping[j]-1];
	tip_pos := SetVec3(tmp.data[0], tmp.data[1], tmp.data[2]);
	tmp := leg_ref_vel_next_wrt_hip[leg_index_mapping[j]-1];
	tip_vel := SetVec3(tmp.data[0], tmp.data[1], tmp.data[2]);
		FOR i := 0 TO 2 DO
			jointTmpPosLast[i]:=jointPosLast[j,i];
		END_FOR	
	
	gvl.legCtrl[j].InversePosAndVel(
		tipPos := tip_pos.data, 
		tipVel := tip_vel.data, 
		refPosLast:=jointTmpPosLast,
		legIndex:=j,
		jntPos => joint_ref_pos[j].data, 
		jntVel => joint_ref_vel[j].data);
	
END_FOR

// link to physical outputs
FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		jointPosTarget[i, j] := joint_ref_pos[i].data[j];
		jointPosLast[i,j]:=jointPosTarget[i, j] ;
		gvl.jntRefPosLastPlanning[i,j]:=jointPosTarget[i, j] ;
		jointVelTarget[i, j] := joint_ref_vel[i].data[j];
		jointFceTarget[i, j] := 0;
	END_FOR
END_FOR

// store refs for next loop
body_ref_pos := body_ref_pos_next;
body_ref_ang := body_ref_ang_next;
leg_ref_pos := leg_ref_pos_next;
leg_ref_pos_wrt_hip := leg_ref_pos_next_wrt_hip;

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="SwingBodyGait">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="SwingBodyGait.DoPlanning">
      <LineId Id="45" Count="3" />
      <LineId Id="50" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="SwingBodyGait.Initialize">
      <LineId Id="138" Count="4" />
      <LineId Id="8" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="22" Count="7" />
      <LineId Id="156" Count="0" />
      <LineId Id="30" Count="21" />
      <LineId Id="88" Count="3" />
      <LineId Id="87" Count="0" />
      <LineId Id="64" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="SwingBodyGait.TrjPlanning">
      <LineId Id="198" Count="0" />
      <LineId Id="202" Count="2" />
      <LineId Id="209" Count="2" />
      <LineId Id="201" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="156" Count="1" />
      <LineId Id="159" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="77" Count="37" />
      <LineId Id="237" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="115" Count="3" />
      <LineId Id="241" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="119" Count="2" />
      <LineId Id="123" Count="5" />
      <LineId Id="242" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="129" Count="8" />
      <LineId Id="5" Count="0" />
      <LineId Id="168" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>