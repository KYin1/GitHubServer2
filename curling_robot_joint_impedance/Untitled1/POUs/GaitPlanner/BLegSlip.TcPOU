<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="BLegSlip" Id="{e693ab2e-c45a-4b9b-8532-febcfe9b4d27}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK BLegSlip
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	period:LREAL:=1;//total time of swing and stance
	duty:LREAL:=0.5;
	step_height:LREAL:=0.08;
	step:ARRAY [0..2] OF LREAL:=[0.1,0.1,0.1];//velocity change step
	delta_t:LREAL:=0.001;//sampling period
	
	// robot geometrical parameters
	hip_pos : ARRAY[0..5, 0..2] OF LREAL := [-0.369,  -0.125, 0,
                                             0,  -0.28, 0,
                                             0.36, -0.125, 0,
                                             0.36, 0.125, 0,
											 0,0.28,0,
											 -0.369,0.125,0];

	leg_index_mapping : ARRAY[0..5] OF INT := [1, 2, 3, 4,5,6];
	Rleg : ARRAY[0..5] OF Mat3;
	
	joint_ref_pos_init : ARRAY[0..5] OF Vec3;
	jointPosLast   : ARRAY[0..5, 0..2] OF LREAL; 
	
	body_ref_pos_init : Vec3;
	body_ref_ang_init : Vec3;
    leg_ref_pos_init : ARRAY[0..5] OF Vec3;
	leg_ref_pos_init_wrt_hip : ARRAY[0..5] OF Vec3;
	
	body_ref_pos : Vec3;
	body_ref_ang : Vec3;
    leg_ref_pos : ARRAY[0..5] OF Vec3;
	leg_ref_pos_wrt_hip : ARRAY[0..5] OF Vec3;
	
	body_ref_pos_next : Vec3;
	body_ref_ang_next : Vec3;
    leg_ref_pos_next : ARRAY[0..5] OF Vec3;
	leg_ref_pos_next_wrt_hip : ARRAY[0..5] OF Vec3;
	leg_ref_vel_next_wrt_hip : ARRAY[0..5] OF Vec3;
	
	// output test
	joint_ref_pos   : ARRAY[0..5] OF Vec3;
	joint_ref_vel   : ARRAY[0..5] OF Vec3;
	
	jointPosTarget  : ARRAY[0..5, 0..2] OF LREAL; 
	jointVelTarget  : ARRAY[0..5, 0..2] OF LREAL;  
	jointFceTarget  : ARRAY[0..5, 0..2] OF LREAL;  
	
	pvt, pvtDot : LREAL;
	
	fbRotmat : RotM;
	fbGetPivot  : GetPivot;
	fbCubicSpline:CubicSpline;
	
	//state
	stance:INT:=1;
	swing:INT:=0;
	ready:INT:=-1;
	init:INT:=-2;
	state:INT:=-1;
	state_last:INT:=-1;
	
	gait_cycle : UDINT := 0;
	gait_cycle_enter: UDINT := 0;
	quit_flag : BOOL := FALSE;
	requir_stop:BOOL:=FALSE;
	require_move_last:BOOL:=FALSE;
	require_move:BOOL:=FALSE;
	isFinished:BOOL:=FALSE;
	inSlip: BOOL:=FALSE;
	
	count_en_ST:UDINT:=0;
	count_en_SW:UDINT:=0;
	count_en_RD:UDINT:=0;
	tip_pos_en_ST:ARRAY [0..1] OF vec3;
	tip_pos_en_SW:ARRAY [0..1] OF vec3;
	tip_pos_en_RD:ARRAY [0..1] OF vec3;
	tip_vel_en_ST:ARRAY [0..1] OF vec3;
	tip_vel_en_SW:ARRAY [0..1] OF vec3;
	tip_vel_en_RD:ARRAY [0..1] OF vec3;
	tip_pos_ref:ARRAY [0..1] OF vec3;
	tip_vel_ref:ARRAY [0..1] OF vec3;
	tip_pos_ref_last:ARRAY [0..1] OF vec3;
	
	trot_vel_desire:LREAL:=0;
	side_vel_desire:LREAL:=0;
	turn_rate_desire:LREAL:=0;
	
	trot_vel:LREAL:=0;
	side_vel:LREAL:=0;
	turn_rate:LREAL:=0;
	
	trot_vel_now:LREAL:=0;
	side_vel_now:LREAL:=0;
	turn_vel_now:LREAL:=0;
	
	SwingTrj_tn:ARRAY[0..4] OF LREAL:=[0,0.25,0.5,0.75,1];
	StanceTrj_tn:ARRAY[0..4] OF LREAL:=[0,0.25,0.5,0.75,1];
	ReadyTrj_tn:ARRAY[0..4] OF LREAL:=[0,0.25,0.5,0.75,1];
	
	normal_tip_pos_cart:ARRAY[0..2] OF LREAL:=[-0.35,-0.1687,0];
	base_height:LREAL;
	base_x:LREAL;
	base_z:LREAL;
	step_height_now:LREAL;
	step_length_now:LREAL;
	step_side_len_now:LREAL;
	start_height:LREAL;
	Mapping05:ARRAY[0..1] OF INT:=[0,5];
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Cmd2Tgt1Step" Id="{beeffd57-2398-4fe5-ac5f-0110c54a749d}">
      <Declaration><![CDATA[METHOD PUBLIC Cmd2Tgt1Step : lreal
VAR_INPUT
	cmdVel:LREAL;//desired velocity
	curVel:LREAL;//current velocity
	step:LREAL;
END_VAR
VAR_OUTPUT
	trgVel:lreal;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF step<0 THEN
	step:=-step;
END_IF
IF (curVel-cmdVel)<=-step THEN
    trgVel:=curVel+step;
ELSIF (curVel-cmdVel)>step THEN
    trgVel:=curVel-step;
else
    trgVel:=cmdVel;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="DoPlanning" Id="{4d3304a2-7a0d-4465-8090-3740a5d73386}">
      <Declaration><![CDATA[METHOD PUBLIC DoPlanning : BOOL
VAR_INPUT
	count : UDINT;
END_VAR
VAR
	i, j  : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF count = 0 THEN
	isFinished := FALSE;
	Initialize();
END_IF
StateMachine();

TrjPlanning();

IF quit_flag THEN
	isFinished := TRUE;
	quit_flag := FALSE;
	inSlip:=FALSE;
	gvl.BLegSlip_trot_vel_desire:=0;
	gvl.BLegSlip_side_vel_desire:=0;
	gvl.BLegSlip_turn_rate_desire:=0;
	trot_vel_desire:=0;
	side_vel_desire:=0;
	turn_rate_desire:=0;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{9fe806b7-d3ff-4541-b2f1-df18e40eb695}">
      <Declaration><![CDATA[METHOD PUBLIC Initialize : BOOL
VAR_INPUT
END_VAR
VAR
	i, j : INT;
	sum_height : LREAL := 0;
	leg_pos    : ARRAY[0..2] OF LREAL;
	
	Rb : Mat3;
	hip_pos_j  : Vec3;
	leg_pos_wrt_com : Vec3;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Rleg[0]:=SetMat3(1,0,0,0,0,-1,0,1,0);
Rleg[1]:=SetMat3(-1,0,0,0,0,1,0,1,0,);
Rleg[2]:=SetMat3(-1,0,0,0,0,1,0,1,0);
Rleg[3]:=SetMat3(-1,0,0,0,0,1,0,1,0);
Rleg[4]:=SetMat3( -1,0,0,0,0,1,0,1,0);
Rleg[5]:=SetMat3(1,0,0,0,0,-1,0,1,0);

quit_flag  := FALSE;
gait_cycle := 0;
state:=ready;
state_last:=init;
require_move:=FALSE;
require_move_last:=FALSE;
requir_stop:=FALSE;

FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		IF ABS(gvl.jntLastRefPos[i, j] - gvl.jntActualPos[i, j]) < gvl.lift_threshold_value THEN
			joint_ref_pos_init[i].data[j] := gvl.jntLastRefPos[i, j];
		ELSE
			joint_ref_pos_init[i].data[j] := gvl.jntActualPos[i, j];
		END_IF
		jointPosLast[i,j]:=joint_ref_pos_init[i].data[j];
	END_FOR
END_FOR

sum_height := 0;
FOR j := 0 TO 5 DO
	// FK
	gvl.legCtrl[j].ForwardKinetics(motorAngles := joint_ref_pos_init[j].data, legIndex:=j, tipPosition => leg_pos);
	leg_ref_pos_init_wrt_hip[j] := SetVec3(leg_pos[0], leg_pos[1], leg_pos[2]);
	sum_height := sum_height - leg_ref_pos_init_wrt_hip[j].data[1];
END_FOR
body_ref_pos_init := SetVec3(0, 0, sum_height/6.0);
body_ref_ang_init := SetVec3(0, 0, 0);                            

FOR j := 0 TO 5 DO
	fbRotMat(yaw := body_ref_ang_init.data[2],
             pitch := body_ref_ang_init.data[1],
             roll := body_ref_ang_init.data[0],
             rm => Rb );
	hip_pos_j := SetVec3(hip_pos[j, 0], hip_pos[j, 1], hip_pos[j, 2]);
	leg_pos_wrt_com := VecAdd(MatMulVec(Rleg[j], leg_ref_pos_init_wrt_hip[j]), hip_pos_j);
    leg_ref_pos_init[j] := VecAdd(body_ref_pos_init, MatMulVec(Rb, leg_pos_wrt_com));
END_FOR

tip_pos_ref[0]:=leg_ref_pos_init_wrt_hip[Mapping05[0]];
tip_pos_ref[1]:=leg_ref_pos_init_wrt_hip[Mapping05[1]];
tip_vel_ref[0]:=setVec3(0,0,0);
tip_vel_ref[1]:=setVec3(0,0,0);
tip_pos_ref_last:=tip_pos_ref;

body_ref_pos := body_ref_pos_init;
body_ref_ang := body_ref_ang_init;
leg_ref_pos := leg_ref_pos_init;
leg_ref_pos_wrt_hip := leg_ref_pos_init_wrt_hip;

FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		jointPosTarget[i, j] := joint_ref_pos_init[i].data[j];
		jointVelTarget[i, j] := 0;
		jointFceTarget[i, j] := 0;
	END_FOR
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine" Id="{ada0ba68-828f-4769-9fc9-80f2376b324b}">
      <Declaration><![CDATA[METHOD PUBLIC StateMachine : BOOL
VAR_INPUT
END_VAR
VAR
	temp:LREAL;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//set target value
trot_vel_desire:=gvl.BLegSlip_trot_vel_desire;
side_vel_desire:=gvl.BLegSlip_side_vel_desire;
turn_rate_desire:=gvl.BLegSlip_turn_rate_desire;
step[0]:=gvl.BLegSlip_step[0];
step[1]:=gvl.BLegSlip_step[1];
step[2]:=gvl.BLegSlip_step[2];

//state switch
IF require_move_last=FALSE AND require_move=TRUE THEN
	gait_cycle_enter:=gait_cycle;
	require_move:=FALSE;
	inSlip:=TRUE;
END_IF
IF inSlip=TRUE THEN
	temp:=(gait_cycle-gait_cycle_enter) MOD TRUNC(period*gvl.sampleRate);
	IF temp>=(1-duty)*gvl.sampleRate*period THEN
		state:=stance;
	ELSE 
		state:=swing;
	END_IF
END_IF

IF state<> state_last THEN
	IF state=stance THEN
		count_en_ST:=gait_cycle;
		tip_pos_en_ST:=tip_pos_ref;
		tip_vel_en_ST:=tip_vel_ref;
	END_IF
	IF state=swing THEN
		count_en_SW:=gait_cycle;
		tip_pos_en_SW:=tip_pos_ref;
		tip_vel_en_SW:=tip_vel_ref;	
		IF requir_stop=TRUE THEN
			trot_vel_desire:=0;
			side_vel_desire:=0;
			turn_rate_desire:=0;
 			gvl.BLegSlip_trot_vel_desire:=0;
			gvl.BLegSlip_side_vel_desire:=0;
			gvl.BLegSlip_turn_rate_desire:=0;			
			IF trot_vel_desire=trot_vel AND side_vel_desire=side_vel AND turn_rate_desire=turn_rate THEN
				state:=ready;
				requir_stop:=FALSE;
				inSlip:=FALSE;
			END_IF
		END_IF
	END_IF
	IF state=ready THEN
		count_en_RD:=gait_cycle;
		tip_pos_en_RD:=tip_pos_ref;
		tip_vel_en_RD:=tip_vel_ref;	
	END_IF
END_IF
IF state=ready AND gait_cycle-count_en_RD=LREAL_TO_UDINT(2*gvl.sampleRate) THEN
	count_en_RD:=gait_cycle;
	tip_pos_en_RD:=tip_pos_ref;
	tip_vel_en_RD:=tip_vel_ref;	
END_IF

IF state<> state_last AND state=swing THEN
	Cmd2Tgt1Step(cmdVel:= trot_vel_desire, curVel:=trot_vel , step:= step[0], trgVel=>trot_vel );
	Cmd2Tgt1Step(cmdVel:= side_vel_desire, curVel:=side_vel , step:= step[1], trgVel=>side_vel );
	Cmd2Tgt1Step(cmdVel:= turn_rate_desire, curVel:=turn_rate , step:= step[2], trgVel=>turn_rate );
END_IF

state_last:=state; 
require_move_last:=require_move;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrjPlanning" Id="{98c4b404-deb5-4415-817f-5d3572ac0c12}">
      <Declaration><![CDATA[METHOD PUBLIC TrjPlanning : BOOL
VAR_INPUT
END_VAR

VAR
	i: INT;
	FixTrj_tn:ARRAY[0..4] OF LREAL:=[0,0.25,0.5,0.75,1];
	InterplateValue:ARRAY[0..4] OF LREAL;
	InterplateTime:ARRAY[0..4] OF LREAL;
	start_vel:LREAL;
	end_vel:LREAL;
	j: INT;
	Rb_target1: Mat3;
	temp: vec3;
	Rb: Mat3;
	
	hip_pos_j : Vec3;
	leg_ref_pos_wrt_com_j : Vec3;
	tmp : Vec3;
	tip_pos, tip_vel : Vec3;
	jointTmpPosLast: ARRAY[0..2] OF LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[gait_cycle := gait_cycle + 1;
IF state=swing THEN
	FOR i:=0 TO 4 DO
		SwingTrj_tn[i]:=FixTrj_tn[i]*period*(1-duty);
	END_FOR
	step_height_now :=step_height;
	FOR i:=0 TO 1 DO
		//trj planning in y direction (up/down)
		base_height:=normal_tip_pos_cart[1];
		start_height:=tip_pos_en_SW[i].data[1];
		InterplateValue[0]:=start_height;
		InterplateValue[1]:=(base_height * 0.05 + start_height * 0.95) + step_height_now * 0.6;
		InterplateValue[2]:=(base_height * 0.25 + start_height * 0.75) + step_height_now * 1.0;
		InterplateValue[3]:=(base_height * 0.65 + start_height * 0.35) + step_height_now * 0.6;
		InterplateValue[4]:=base_height;
		end_vel:=-0.01 / (period * duty);
		start_vel:=tip_vel_en_SW[i].data[1];
		fbCubicSpline(x:=SwingTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
			xt:=(gait_cycle-count_en_SW)*delta_t , yt=> tip_pos_ref[i].data[1], vt=> );
			
		 // trj planning in x direction (forward/backward)
		 base_x:=normal_tip_pos_cart[0];
		 trot_vel_now:=trot_vel-turn_rate*hip_pos[Mapping05[i],1];
		 step_length_now:= period * duty * trot_vel_now;
		 InterplateValue[0]:=tip_pos_en_SW[i].data[0];	
		 InterplateValue[1]:=base_x-0.48*step_length_now;;
		 InterplateValue[2]:=base_x;
		 InterplateValue[3]:=base_x+0.48*step_length_now;
		 InterplateValue[4]:=base_x+0.5*step_length_now;
		 end_vel:=-trot_vel_now;
		 start_vel:=tip_vel_en_SW[i].data[0];
		 fbCubicSpline(x:=SwingTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
			xt:=(gait_cycle-count_en_SW)*delta_t , yt=> tip_pos_ref[i].data[0], vt=> );
			
		 //trj planning in z direction (right/left)
		 base_z:=normal_tip_pos_cart[2];
		 //turn_vel_now:=turn_rate*(hip_pos[Mapping05[i],0]+normal_tip_pos_cart[1])+side_vel;
		 turn_vel_now:=turn_rate*(hip_pos[Mapping05[i],0]+normal_tip_pos_cart[0])+side_vel;
		 step_side_len_now := period * duty * turn_vel_now;
		 InterplateValue[0]:=tip_pos_en_SW[i].data[2];
		 InterplateValue[1]:=base_z+0.48* step_side_len_now;
		 InterplateValue[2]:=base_z;
		 InterplateValue[3]:=base_z-0.48* step_side_len_now;
		 InterplateValue[4]:=base_z-0.50* step_side_len_now;
		 end_vel:=turn_vel_now;
		 start_vel:=tip_vel_en_SW[i].data[2];
		 fbCubicSpline(x:=SwingTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
			xt:=(gait_cycle-count_en_SW)*delta_t , yt=> tip_pos_ref[i].data[2], vt=> );	
	END_FOR
ELSIF state=stance THEN 
	FOR i:=0 TO 4 DO
		StanceTrj_tn[i]:=FixTrj_tn[i]*period*duty;
	END_FOR
	FOR i:=0 TO 1 DO
		//trj planning in y direction (up/down)
		start_height:=tip_pos_en_ST[i].data[1];
		(*InterplateValue[0]:=start_height;
		InterplateValue[1]:=start_height-0.0045;
		InterplateValue[2]:=start_height-0.0085;
		InterplateValue[3]:=start_height-0.0125;
		InterplateValue[4]:=start_height-0.0160;*)
		InterplateValue[0]:=start_height;
		InterplateValue[1]:=start_height-0.0045*1;
		InterplateValue[2]:=start_height-0.0085*1;
		InterplateValue[3]:=start_height-0.0125*1;
		InterplateValue[4]:=start_height-0.0160*1;
		end_vel:=0;
		start_vel:=tip_vel_en_ST[i].data[1];
		fbCubicSpline(x:=StanceTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
			xt:=(gait_cycle-count_en_ST)*delta_t , yt=> tip_pos_ref[i].data[1], vt=> );	

		//trj planning in X direction (forward/backward)
		trot_vel_now:=trot_vel-	turn_rate*hip_pos[Mapping05[i],1];	
		step_length_now := period * duty * trot_vel_now;
		InterplateValue[0]:=tip_pos_en_ST[i].data[0];
		InterplateValue[1]:=tip_pos_en_ST[i].data[0]-0.28*step_length_now;
		InterplateValue[2]:=tip_pos_en_ST[i].data[0]-0.50*step_length_now;
		InterplateValue[3]:=tip_pos_en_ST[i].data[0]-0.72*step_length_now;
		InterplateValue[4]:=tip_pos_en_ST[i].data[0]-1.00*step_length_now;
		end_vel:= -trot_vel_now;
		start_vel:=tip_vel_en_ST[i].data[0];
		fbCubicSpline(x:=StanceTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
			xt:=(gait_cycle-count_en_ST)*delta_t , yt=> tip_pos_ref[i].data[0], vt=> );	
			
		// trj planning in z direction (right/left)
		//turn_vel_now:=turn_rate*(hip_pos[Mapping05[i],0]+normal_tip_pos_cart[1])+side_vel;
		turn_vel_now:=turn_rate*(hip_pos[Mapping05[i],0]+normal_tip_pos_cart[0])+side_vel;
		step_side_len_now := period * duty * turn_vel_now;
		InterplateValue[0]:=tip_pos_en_ST[i].data[2];
		InterplateValue[1]:=tip_pos_en_ST[i].data[2]+0.28*step_side_len_now;
		InterplateValue[2]:=tip_pos_en_ST[i].data[2]+0.50*step_side_len_now;
		InterplateValue[3]:=tip_pos_en_ST[i].data[2]+0.72*step_side_len_now;
		InterplateValue[4]:=tip_pos_en_ST[i].data[2]+1.00*step_side_len_now;
		end_vel:=turn_vel_now;
		start_vel:=tip_vel_en_ST[i].data[2];
		fbCubicSpline(x:=StanceTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
			xt:=(gait_cycle-count_en_ST)*delta_t , yt=> tip_pos_ref[i].data[2], vt=> );			
	END_FOR
ELSE
	FOR i:=0 TO 4 DO
		ReadyTrj_tn[i]:=FixTrj_tn[i]*2;//2s for ready gait
	END_FOR	
	FOR i:=0 TO 1 DO
		//trj planning in X direction (forward/backward)
		InterplateValue[0]:=tip_pos_en_RD[i].data[0];
		InterplateValue[1]:=tip_pos_en_RD[i].data[0];
		InterplateValue[2]:=tip_pos_en_RD[i].data[0];
		InterplateValue[3]:=tip_pos_en_RD[i].data[0];
		InterplateValue[4]:=tip_pos_en_RD[i].data[0];
		end_vel:=0;
		start_vel:=tip_vel_en_ST[i].data[0];
		fbCubicSpline(x:=ReadyTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
			xt:=(gait_cycle-count_en_RD)*delta_t , yt=> tip_pos_ref[i].data[0], vt=> );	

		//trj planning in y direction (right/left)
		InterplateValue[0]:=tip_pos_en_RD[i].data[1];
		InterplateValue[1]:=tip_pos_en_RD[i].data[1];
		InterplateValue[2]:=tip_pos_en_RD[i].data[1];
		InterplateValue[3]:=tip_pos_en_RD[i].data[1];
		InterplateValue[4]:=tip_pos_en_RD[i].data[1];
		end_vel:=0;
		start_vel:=tip_vel_en_ST[i].data[1];
		fbCubicSpline(x:=ReadyTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
			xt:=(gait_cycle-count_en_RD)*delta_t , yt=> tip_pos_ref[i].data[1], vt=> );	
		//trj planning in z direction (up/down)
		InterplateValue[0]:=tip_pos_en_RD[i].data[2];
		InterplateValue[1]:=tip_pos_en_RD[i].data[2];
		InterplateValue[2]:=tip_pos_en_RD[i].data[2];
		InterplateValue[3]:=tip_pos_en_RD[i].data[2];
		InterplateValue[4]:=tip_pos_en_RD[i].data[2];
		end_vel:=0;
		start_vel:=tip_vel_en_ST[i].data[2];
		fbCubicSpline(x:=ReadyTrj_tn , y:=InterplateValue , dy0:=start_vel , dy4:=end_vel , 
			xt:=(gait_cycle-count_en_RD)*delta_t , yt=> tip_pos_ref[i].data[2], vt=> );		
		END_FOR
END_IF
FOR i:=0 TO 1 DO
	FOR j:=0 TO 2 DO
		tip_vel_ref[i].data[j]:=(tip_pos_ref[i].data[j]-tip_pos_ref_last[i].data[j])/delta_t;
	END_FOR
END_FOR
tip_pos_ref_last:=tip_pos_ref;

body_ref_pos:=body_ref_pos_init;
body_ref_ang:=body_ref_ang_init;
leg_ref_pos:=leg_ref_pos_init;
FOR i:=0 TO 1 DO
	fbRotMat(yaw := body_ref_ang.data[2], pitch := body_ref_ang.data[1],roll := body_ref_ang.data[0], rm =>  Rb_target1 );
	temp.data[0]:=hip_pos[Mapping05[i],0];temp.data[1]:=hip_pos[Mapping05[i],1];temp.data[2]:=hip_pos[Mapping05[i],2];
	leg_ref_pos[Mapping05[i]]:= VecAdd( MatMulVec(Rb_target1, VecAdd(temp,MatMulVec(Rleg[Mapping05[i]],tip_pos_ref[i]))),body_ref_pos);
END_FOR

// transform TO leg local frame AND DO inverse kinematics

FOR j := 0 TO 5 DO
	fbRotMat(
    	yaw := body_ref_ang.data[2], 
		pitch := body_ref_ang.data[1], 
		roll := body_ref_ang.data[0], 
		rm => Rb);
	hip_pos_j := SetVec3(hip_pos[j, 0], hip_pos[j, 1], hip_pos[j, 2]);

	//leg_ref_pos_wrt_com = Rb' * (leg_ref_pos - body_ref_pos)
	leg_ref_pos_wrt_com_j := MatMulVec(
		                         MatTranspose(Rb),
								 VecAdd(
									 leg_ref_pos[j],
									 VecNeg(body_ref_pos)
                                 )
                             );
	// leg_ref_pos_wrt_hip = Rleg' * (leg_ref_pos_wrt_com_j - hip_pos)
	leg_ref_pos_next_wrt_hip[j] := MatMulVec(
		                               MatTranspose(Rleg[j]),
									   VecAdd(
										   leg_ref_pos_wrt_com_j,
										   VecNeg(hip_pos_j)
									   )
								   );
								   
	leg_ref_vel_next_wrt_hip[j] := VecMulNum(VecAdd(leg_ref_pos_next_wrt_hip[j], VecNeg(leg_ref_pos_wrt_hip[j])), DINT_TO_LREAL(gvl.sampleRate));
END_FOR


// mapping to actual joints
FOR j := 0 TO 5 DO
	tmp := leg_ref_pos_next_wrt_hip[leg_index_mapping[j]-1];
	tip_pos := SetVec3(tmp.data[0], tmp.data[1], tmp.data[2]);
	tmp := leg_ref_vel_next_wrt_hip[leg_index_mapping[j]-1];
	tip_vel := SetVec3(tmp.data[0], tmp.data[1], tmp.data[2]);
	FOR i:= 0 TO 2 DO
		jointTmpPosLast[i]:=jointPosLast[j,i];
	END_FOR		
	gvl.legCtrl[j].InversePosAndVel(
		tipPos := tip_pos.data, 
		tipVel := tip_vel.data, 
		refPosLast:=jointTmpPosLast,
		legIndex:=j,
		jntPos => joint_ref_pos[j].data, 
		jntVel => joint_ref_vel[j].data);
	
END_FOR

// link to physical outputs
FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		jointPosTarget[i, j] := joint_ref_pos[i].data[j];
		jointPosLast[i,j]:=jointPosTarget[i, j] ;
		jointVelTarget[i, j] := joint_ref_vel[i].data[j];
		jointFceTarget[i, j] := 0;
	END_FOR
END_FOR

// store refs for next loop
leg_ref_pos_wrt_hip := leg_ref_pos_next_wrt_hip;








]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="BLegSlip">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="BLegSlip.Cmd2Tgt1Step">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="12" Count="5" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="BLegSlip.DoPlanning">
      <LineId Id="45" Count="3" />
      <LineId Id="50" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="51" Count="4" />
      <LineId Id="71" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="79" Count="0" />
      <LineId Id="83" Count="1" />
      <LineId Id="82" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BLegSlip.Initialize">
      <LineId Id="123" Count="4" />
      <LineId Id="8" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="162" Count="3" />
      <LineId Id="167" Count="0" />
      <LineId Id="22" Count="7" />
      <LineId Id="141" Count="0" />
      <LineId Id="30" Count="21" />
      <LineId Id="155" Count="2" />
      <LineId Id="159" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="88" Count="3" />
      <LineId Id="87" Count="0" />
      <LineId Id="64" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BLegSlip.StateMachine">
      <LineId Id="80" Count="0" />
      <LineId Id="85" Count="2" />
      <LineId Id="89" Count="2" />
      <LineId Id="83" Count="1" />
      <LineId Id="46" Count="1" />
      <LineId Id="92" Count="1" />
      <LineId Id="48" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="54" Count="3" />
      <LineId Id="52" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="37" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="62" Count="1" />
      <LineId Id="105" Count="1" />
      <LineId Id="103" Count="0" />
      <LineId Id="64" Count="1" />
      <LineId Id="67" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="44" Count="1" />
      <LineId Id="42" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="76" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="74" Count="0" />
    </LineIds>
    <LineIds Name="BLegSlip.TrjPlanning">
      <LineId Id="182" Count="0" />
      <LineId Id="5" Count="1" />
      <LineId Id="11" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="58" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="31" Count="3" />
      <LineId Id="25" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="59" Count="1" />
      <LineId Id="43" Count="1" />
      <LineId Id="62" Count="9" />
      <LineId Id="73" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="74" Count="2" />
      <LineId Id="72" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="79" Count="2" />
      <LineId Id="83" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="86" Count="2" />
      <LineId Id="20" Count="0" />
      <LineId Id="89" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="94" Count="4" />
      <LineId Id="306" Count="3" />
      <LineId Id="305" Count="0" />
      <LineId Id="99" Count="1" />
      <LineId Id="102" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="105" Count="4" />
      <LineId Id="93" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="112" Count="2" />
      <LineId Id="116" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="117" Count="1" />
      <LineId Id="332" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="121" Count="1" />
      <LineId Id="115" Count="0" />
      <LineId Id="123" Count="3" />
      <LineId Id="129" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="133" Count="1" />
      <LineId Id="131" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="135" Count="6" />
      <LineId Id="132" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="152" Count="2" />
      <LineId Id="148" Count="0" />
      <LineId Id="156" Count="2" />
      <LineId Id="155" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="161" Count="7" />
      <LineId Id="160" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="178" Count="1" />
      <LineId Id="177" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="198" Count="2" />
      <LineId Id="197" Count="0" />
      <LineId Id="201" Count="1" />
      <LineId Id="205" Count="1" />
      <LineId Id="203" Count="0" />
      <LineId Id="209" Count="62" />
      <LineId Id="208" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="172" Count="3" />
      <LineId Id="170" Count="0" />
      <LineId Id="169" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>