<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="RcToStanceFromSlip" Id="{bf7af8f9-d261-4cf2-b175-4c579c80e4c2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RcToStanceFromSlip
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	tTotalAll     : LREAL := 5000;
	
	// robot geometrical parameters
	hip_pos : ARRAY[0..5, 0..2] OF LREAL := [-0.369,  -0.125, 0,
                                             0,  -0.28, 0,
                                             0.36, -0.125, 0,
                                             0.36, 0.125, 0,
											 0,0.28,0,
											 -0.369,0.125,0];

	leg_index_mapping : ARRAY[0..5] OF INT := [1, 2, 3, 4,5,6];
	Rleg : ARRAY[0..5] OF Mat3;
	
	gait_cycle : UDINT := 0;
	quit_flag : BOOL := FALSE;
	
	joint_ref_pos_init : ARRAY[0..5] OF Vec3;
	jointPosLast   : ARRAY[0..5, 0..2] OF LREAL; 
	
	body_ref_pos_init : Vec3;
	body_ref_ang_init : Vec3;
    leg_ref_pos_init : ARRAY[0..5] OF Vec3;
	leg_ref_pos_init_wrt_hip : ARRAY[0..5] OF Vec3;

	body_ref_pos : Vec3;
	body_ref_ang : Vec3;
	body_ref_angvel:vec3;
    leg_ref_pos : ARRAY[0..5] OF Vec3;
	leg_ref_pos_wrt_hip : ARRAY[0..5] OF Vec3;
	body_ref_pos_enter : Vec3;
	body_ref_ang_enter : Vec3;
    leg_ref_pos_enter : ARRAY[0..5] OF Vec3;
	leg_ref_pos_wrt_hip_enter : ARRAY[0..5] OF Vec3;
	
	body_ref_pos_next : Vec3;
	body_ref_ang_next : Vec3;
    leg_ref_pos_next : ARRAY[0..5] OF Vec3;
	leg_ref_pos_next_wrt_hip : ARRAY[0..5] OF Vec3;
	leg_ref_vel_next_wrt_hip : ARRAY[0..5] OF Vec3;
	
	// output test
	joint_ref_pos   : ARRAY[0..5] OF Vec3;
	joint_ref_vel   : ARRAY[0..5] OF Vec3;
	
	jointPosTarget  : ARRAY[0..5, 0..2] OF LREAL; 
	jointVelTarget  : ARRAY[0..5, 0..2] OF LREAL;  
	jointFceTarget  : ARRAY[0..5, 0..2] OF LREAL;  
	
	pvt, pvtDot : LREAL;
	
	fbRotmat : RotM;
	fbGetPivot  : GetPivot;
	delta_t:LREAL :=0.0025;//sample time
	
	isFinished : BOOL := FALSE;
	
	//target value from visual system
	adjust_angle_rad:LREAL:=0;//unit:rad
	adjust_angle_actual_rad:LREAL:=0;//unit:rad
	target_vel:LREAL:=0;//unit:m/s
	stone_rot_vel:LREAL:=0;//unit:rad/s
	
	//common variable
	sum_height : LREAL := 0;
	fbElipseInterpolation:ElipseInterpolation;
	fbHermitInterpolation:HermitInterpolation;
	Mapping14:ARRAY[0..1] OF INT:=[1,4];
	Mapping05:ARRAY[0..1] OF INT:=[0,5];
	Mapping23:ARRAY[0..1] OF INT:=[2,3];
	body_target_pos: Vec3;
	
	//state machine 
	state:UINT;
	Ready:UINT:=1;//init state
	BlegCenter:UINT:=2; 
	MlegRollA:UINT:=3;
	FlegRotA:UINT:=4;
	ReduceHeight:UINT:=5;
	MlegRollB:UINT:=6;
	StoneRot:UINT:=7;
	RoughTuning:UINT:=8;
	FineTuning:UINT:=9;
	LiftMleg:UINT:=10;
	SpeedUp:UINT:=11;
	Slide:UINT:=12;
	PushReleaseBall:UINT:=13;
	SpeedDown:UINT:=14;
	MlegRollC:UINT:=15;
	AddHeight:UINT:=16;
	FlegRotB:UINT:=17;
	CurlingFinished:UINT:=18;
	RecoveryReady:UINT:=18;
	
	//contol button
	RequireMlegRollA:BOOL:=FALSE;
	RequireBlegCenter:BOOL:=FALSE;
	RequireFlegRotA:BOOL:=FALSE;
	RequireReduceHeight:BOOL:=FALSE;	
	RequireMlegRollB:BOOL:=FALSE;	
	RequireStoneRot:BOOL:=FALSE;		
	RequireRoughTuning:BOOL:=FALSE;
	RequireFineTuning:BOOL:=FALSE;
	RequireLiftMleg:BOOL:=FALSE;
	RequireSpeedUp:BOOL:=FALSE;
	RequireSlide:BOOL:=FALSE;
	RequirePushReleaseBall:BOOL:=FALSE;
	RequireSpeedDown:BOOL:=FALSE;
	RequireMlegRollC:BOOL:=FALSE;
	RequireAddHeight:BOOL:=FALSE;
	RequireFlegRotB:BOOL:=FALSE;
	RequireRecoveryReady:BOOL:=FALSE;
	
	IsReady:BOOL:=FALSE;
	IsMlegRollA:BOOL:=FALSE;
	IsBlegCenter:BOOL:=FALSE;
	IsFlegRotA:BOOL:=FALSE;
	IsReduceHeight:BOOL:=FALSE;	
	IsMlegRollB:BOOL:=FALSE;	
	IsStoneRot:BOOL:=FALSE;		
	IsRoughTuning:BOOL:=FALSE;
	IsFineTuning:BOOL:=FALSE;
	IsLiftMleg:BOOL:=FALSE;
	IsSpeedUp:BOOL:=FALSE;
	IsSlide:BOOL:=FALSE;
	IsPushReleaseBall:BOOL:=FALSE;
	IsSpeedDown:BOOL:=FALSE;
	IsMlegRollC:BOOL:=FALSE;
	IsAddHeight:BOOL:=FALSE;
	IsFlegRotB:BOOL:=FALSE;
	IsCurlingFinished:BOOL:=FALSE;
	IsRecoveryReady:BOOL:=FALSE;

	ReadyFinished:bool:=false;
	MlegRollAFinished:BOOL:=FALSE;
	BlegCenterFinished:BOOL:=FALSE;
	FlegRotAFinished:BOOL:=FALSE;
	ReduceHeightFinished:BOOL:=FALSE;
	MlegRollBFinished:BOOL:=FALSE;
	StoneRotFinished:BOOL:=FALSE;
	RoughTuningFinished:BOOL:=FALSE;
	FineTuningFinished:BOOL:=FALSE;
	LiftMlegFinished:BOOL:=FALSE;
	SpeedUpFinished:BOOL:=FALSE;
	SlideFinished:BOOL:=FALSE;
	PushReleaseBallFinished:BOOL:=FALSE;
	SpeedDownFinished:BOOL:=FALSE;
	MlegRollCFinished:BOOL:=FALSE;
	AddHeightFinished:BOOL:=FALSE;
	FlegRotBFinished:BOOL:=FALSE;
	RecoveryReadyFinished:BOOL:=FALSE;
	CurlingGaitFinished: BOOL:=FALSE;
	
	EnterMlegRollACount:UDINT;
	EnterBlegCenterCount:UDINT;
	EnterFlegRotACount:UDINT;
	EnterReduceHeightCount:UDINT;
	EnterMlegRollBCount:UDINT;
	EnterStoneRotCount:UDINT;
	EnterRoughTuningCount:UDINT;
	EnterFineTuningCount:UDINT;
	EnterLiftMlegCount:UDINT;
	EnterSpeedUpCount:UDINT;
	EnterSlideCount:UDINT;
	EnterPushReleaseBallCount:UDINT;
	EnterSpeedDownCount:UDINT;
	EnterMlegRollCCount:UDINT;
	EnterAddHeightCount:UDINT;
	EnterFlegRotBCount:UDINT;
	EnterRecoveryReadyCount:UDINT;
		
	//BlegCenter
	BlegCenter_BJntStart:ARRAY[0..1] OF vec3;
	BlegCenter_BPosWrtHip:ARRAY[0..1] OF vec3;
	BlegCenter_BJntRef:ARRAY[0..1] OF vec3;
	BlegCenterRetractTime:LREAL:=2;
	BlegCenterExtendTime:LREAL:=3;
	IsLeg0Move:BOOL:=FALSE;
	IsLeg5Move:BOOL:=FALSE;
	EnterLeg5MoveCount:UDINT;
	
	//MlegRollA
	MlegRollA_MJntStart:ARRAY[0..1] OF vec3;
	MlegRollA_MPosWrtHip:ARRAY[0..1] OF vec3;
	MlegRollA_MJntRef:ARRAY[0..1] OF vec3;
	MlegRollATime:LREAL:=3;
	
	//FlegRotA
	FlegRotA_FJntStart:ARRAY[0..1] OF vec3;
	FlegRotA_FPosWrtHip:ARRAY[0..1] OF vec3;
	FlegRotA_FJntRef:ARRAY[0..1] OF vec3;
	FlegRotATime:LREAL:=3;
	
	//ReduceHeight
	ReduceHeight_FJntRef:ARRAY[0..1] OF vec3;
	ReduceHeight_FPosWrtHip:ARRAY[0..1] OF vec3;
	ReduceHeightTime:LREAL:=3;
	targetHeight:LREAL:=0.1797;//need be calibrated
	
	//MlegRollB
	MlegRollB_MJntStart:ARRAY[0..1] OF vec3;
	MlegRollB_MPosWrtHip:ARRAY[0..1] OF vec3;
	MlegRollB_MJntRef:ARRAY[0..1] OF vec3;
	MlegRollBTime:LREAL:=3;
	
	//StoneRot
	StoneRot_FJntStart:ARRAY[0..1] OF vec3;
	StoneRot_FPosWrtHip:ARRAY[0..1] OF vec3;
	StoneRot_FJntRef:ARRAY[0..1] OF vec3;
	StoneGripTime:LREAL:=3;
	StoneRotSubState:ARRAY [0..1] OF BOOL:=[FALSE,FALSE];
	StoneRotTime:LREAL:=5;
	
	//RoughTuning
	RotCenter1:vec3;
	BodyPosStart:vec3;
	BodyAngStart:vec3;
	BodyPoseEnd:vec3;
	BodyAngEnd:vec3;
	RoughTuningTime:LREAL:=3;
	RoughTuningExtractTime:LREAL:=2;
	RoughTuningExtendTime:LREAL:=2;
	RoughTuning_FJntRef:ARRAY[0..1] OF vec3;
	RoughTuning_FPosWrtHip:ARRAY[0..1] OF vec3;
	RoughTuning_MJntStart:ARRAY[0..1] OF vec3;
	RoughTuning_MJntRef:ARRAY[0..1] OF vec3;
	RoughTuning_MPosWrtHip:ARRAY[0..1] OF vec3;
	RoughTuning_legPosEnterExtract:ARRAY[0..5] OF vec3;
	
	//FineTuning
	RotCenter2:vec3;
	FineTuning_FJntRef:ARRAY[0..1] OF vec3;
	FineTuning_FPosWrtHip:ARRAY[0..1] OF vec3;
	FineTuningBodyPos:vec3;
	FineTuningBodyAng:vec3;
	realTimeBodyYaw:LREAL;
	realTimeBodyYawLast:lreal;
	
	//LiftMleg
	LiftMleg_MJntStart:ARRAY[0..1] OF vec3;
	LiftMleg_MJntRef:ARRAY[0..1] OF vec3;
	LiftMleg_MPosWrtHip:ARRAY[0..1] OF vec3;
	LiftMlegTime:LREAL:=2;
	
	//SpeedUp
	SpeedUpSubState:UINT:=0;
	SpeedUpAS:UINT:=1;//acceleration
	SpeedUpCS:UINT:=2;//constant velocity
	SpeedUpDS:UINT:=3;//deceleration velocity
	SpeedUpSS:UINT:=4;//stop
	 
	Distance_x_AS:LREAL:=0.3;// acceleration distance in x direction
	Distance_x_DS:LREAL:=0.15;// deceleration distance in x direction
	Distance_y_DS:LREAL:=0.1;// deceleration distance in y direction
	Time_AS:LREAL:=0.3;//acceleration time
	Time_CS:LREAL:=0.05;//constant time
	Time_DS:LREAL:=0.2;//deceleration time
	 
	EnterSpeedUpASCount:UDINT;
	EnterSpeedUpCSCount:UDINT;
	EnterSpeedUpDSCount:UDINT;
	EnterSpeedUpSPCount:UDINT;
	
	SpeedUp_MJntRef:ARRAY[0..1] OF vec3;
	SpeedUp_MPosWrtHip:ARRAY[0..1] OF vec3;
	SpeedUp_FJntRef:ARRAY[0..1] OF vec3;
	SpeedUp_FPosWrtHip:ARRAY[0..1] OF vec3;
	
	body_ref_pos_wrt_body:vec3;
	
	//Slide
	
	//PushReleaseBall
	PushReleaseBall_FJntStart:ARRAY[0..1] OF vec3;
	PushReleaseBall_FPosStartWrtHip:ARRAY[0..1] OF vec3;
	PushReleaseBall_FJntRef:ARRAY[0..1] OF vec3;
	PushReleaseBall_FPosWrtHip:ARRAY[0..1] OF vec3;
	PushTime:LREAL:=0.2;
	PushDistance:LREAL:=0.2;
	DecVelTime:LREAL:=0.1;
	DecVelDistance:LREAL:=0.1;
	PushVelocity:LREAL:=0.5;
	ReleaseTime:LREAL:=0.25;
	
	//SpeedDown
	SpeedDownTime:LREAL:=2;
	SpeedDown_MJntStart:ARRAY[0..1] OF vec3;
	SpeedDown_MJntRef:ARRAY[0..1] OF vec3;
	SpeedDown_MPosWrtHip:ARRAY[0..1] OF vec3;	
	
	//MlegRollC
	MlegRollC_MJntStart:ARRAY[0..1] OF vec3;
	MlegRollC_MPosWrtHip:ARRAY[0..1] OF vec3;
	MlegRollC_MJntRef:ARRAY[0..1] OF vec3;
	MlegRollCTime:LREAL:=3;
	MlegRollC_MJntTarget:ARRAY[0..1,0..2] OF LREAL;
	
	//AddHeight
	AddHeightTime:LREAL:=5;
	AddHeight_FJntStart:ARRAY[0..1] OF vec3;
	AddHeight_FPosWrtHip:ARRAY[0..1] OF vec3;
	
	//FlegRotB
	FlegRotBTime:LREAL:=2;
	FlegRotB_FJntStart:ARRAY[0..1] OF vec3;
	FlegRotB_FJntRef:ARRAY[0..1] OF vec3;
	FlegRotB_FPosWrtHip:ARRAY[0..1] OF vec3;	

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="DoPlanning" Id="{6c0b7572-7049-466f-beed-b89cfa2428d4}">
      <Declaration><![CDATA[METHOD PUBLIC DoPlanning : BOOL
VAR_INPUT
	count : UDINT;
END_VAR
VAR
	i, j  : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF count = 0 THEN
	isFinished := FALSE;
	Initialize();
END_IF
StateMachine();

TrjPlanning();

IF quit_flag THEN
	isFinished := TRUE;
	quit_flag := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{c1a97807-3cbc-42a2-a2a4-fd94552c35bd}">
      <Declaration><![CDATA[METHOD PUBLIC Initialize : BOOL
VAR_INPUT
END_VAR
VAR
	i, j : INT;
	
	leg_pos    : ARRAY[0..2] OF LREAL;
	
	Rb : Mat3;
	hip_pos_j  : Vec3;
	leg_pos_wrt_com : Vec3;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Rleg[0]:=SetMat3(1,0,0,0,0,-1,0,1,0);
Rleg[1]:=SetMat3(-1,0,0,0,0,1,0,1,0,);
Rleg[2]:=SetMat3(-1,0,0,0,0,1,0,1,0);
Rleg[3]:=SetMat3(-1,0,0,0,0,1,0,1,0);
Rleg[4]:=SetMat3( -1,0,0,0,0,1,0,1,0);
Rleg[5]:=SetMat3(1,0,0,0,0,-1,0,1,0);

state:=Ready;
RequireMlegRollC:=TRUE;
ReadyFinished:=TRUE;
RequireAddHeight:=FALSE;
RequireFlegRotB:=FALSE;

quit_flag  := FALSE;
gait_cycle := 0;

// control button for each state, need be commented out at actual environment
RequireMlegRollA:=FALSE;
RequireBlegCenter:=FALSE;
RequireFlegRotA:=FALSE;
RequireReduceHeight:=FALSE;	
RequireMlegRollB:=FALSE;	
RequireStoneRot:=FALSE;		
RequireRoughTuning:=FALSE;
RequireFineTuning:=FALSE;
RequireLiftMleg:=FALSE;
RequireSpeedUp:=FALSE;
RequireSlide:=FALSE;
RequirePushReleaseBall:=FALSE;
RequireSpeedDown:=FALSE;
RequireAddHeight:=FALSE;
RequireFlegRotB:=FALSE;
RequireRecoveryReady:=FALSE;

MlegRollAFinished:=FALSE;
BlegCenterFinished:=FALSE;
FlegRotAFinished:=FALSE;
ReduceHeightFinished:=FALSE;
MlegRollBFinished:=FALSE;
StoneRotFinished:=FALSE;
RoughTuningFinished:=FALSE;
FineTuningFinished:=FALSE;
LiftMlegFinished:=FALSE;
SpeedUpFinished:=FALSE;
SlideFinished:=FALSE;
PushReleaseBallFinished:=FALSE;
SpeedDownFinished:=FALSE;
MlegRollCFinished:=FALSE;
AddHeightFinished:=FALSE;
FlegRotBFinished:=FALSE;
RecoveryReadyFinished:=FALSE;
CurlingGaitFinished:=FALSE;

// bodyRot
delta_t:=1.0/gvl.SampleRate;//sample time

//SetTargetValue(GVL.adjust_angle_degree,GVL.target_vel,GVL.stone_rot_vel);
IsReady:=true;

FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		joint_ref_pos_init[i].data[j] := gvl.jntActualPos[i, j];
		jointPosLast[i,j]:=joint_ref_pos_init[i].data[j];
	END_FOR
END_FOR

sum_height := 0;
FOR j := 0 TO 5 DO
	// FK
	gvl.legCtrl[j].ForwardKinetics(motorAngles := joint_ref_pos_init[j].data, legIndex:=j, tipPosition => leg_pos);
	leg_ref_pos_init_wrt_hip[j] := SetVec3(leg_pos[0], leg_pos[1], leg_pos[2]);
	sum_height := sum_height - leg_ref_pos_init_wrt_hip[j].data[1];
END_FOR
body_ref_pos_init := SetVec3(0, 0, sum_height/6.0);
body_ref_ang_init := SetVec3(0, 0, 0);                            

FOR j := 0 TO 5 DO
	fbRotMat(yaw := body_ref_ang_init.data[2],
             pitch := body_ref_ang_init.data[1],
             roll := body_ref_ang_init.data[0],
             rm => Rb );
	hip_pos_j := SetVec3(hip_pos[j, 0], hip_pos[j, 1], hip_pos[j, 2]);
	leg_pos_wrt_com := VecAdd(MatMulVec(Rleg[j], leg_ref_pos_init_wrt_hip[j]), hip_pos_j);
    leg_ref_pos_init[j] := VecAdd(body_ref_pos_init, MatMulVec(Rb, leg_pos_wrt_com));
END_FOR

body_ref_pos := body_ref_pos_init;
body_ref_ang := body_ref_ang_init;
leg_ref_pos := leg_ref_pos_init;
leg_ref_pos_wrt_hip := leg_ref_pos_init_wrt_hip;

FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		jointPosTarget[i, j] := joint_ref_pos_init[i].data[j];
		jointVelTarget[i, j] := 0;
		jointFceTarget[i, j] := 0;
	END_FOR
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine" Id="{0c681be4-3663-4744-b405-ebfcfce3005c}">
      <Declaration><![CDATA[METHOD PUBLIC StateMachine : BOOL
VAR_INPUT
END_VAR

VAR
	i: INT;
	j: INT;
	RotRadius: LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF state=ready  AND RequireMlegRollC=TRUE THEN
	state:=MlegRollC;
	IsReady:=FALSE;
	IsMlegRollC:=TRUE;
	RequireMlegRollC:=FALSE;
	body_ref_pos_enter := body_ref_pos;
	body_ref_ang_enter := body_ref_ang;
	leg_ref_pos_enter := leg_ref_pos;
	EnterMlegRollCCount:=gait_cycle;	
	FOR i:=0 TO 1 DO
		FOR j:=0 TO 2 DO
			MlegRollC_MJntStart[i].data[j]:=jointPosLast[Mapping14[i],j];
		END_FOR
	END_FOR
ELSIF state=MlegRollC AND MlegRollCFinished=TRUE AND RequireAddHeight=TRUE THEN	
	state:=AddHeight;
	RequireAddHeight:=FALSE;
	IsMlegRollC:=FALSE;
	IsAddHeight:=TRUE;
	body_ref_pos_enter := body_ref_pos;
	body_ref_ang_enter := body_ref_ang;
	leg_ref_pos_enter := leg_ref_pos;
	EnterAddHeightCount:=gait_cycle;
	FOR i:=0 TO 1 DO
		FOR j:=0 TO 2 DO
			AddHeight_FJntStart[i].data[j]:=jointPosLast[Mapping23[i],j];
		END_FOR
	END_FOR
	body_target_pos:=body_ref_pos_enter;
	body_target_pos.data[2]:=sum_height/6.0+0.2903;
ELSIF state=AddHeight AND AddHeightFinished=TRUE AND RequireFlegRotB=TRUE THEN	
	state:=FlegRotB;
	IsAddHeight:=FALSE;
	IsFlegRotB:=TRUE;
	RequireFlegRotB:=FALSE;
	body_ref_pos_enter := body_ref_pos;
	body_ref_ang_enter := body_ref_ang;
	leg_ref_pos_enter := leg_ref_pos;
	EnterFlegRotBCount:=gait_cycle;
	FOR i:=0 TO 1 DO
		FOR j:=0 TO 2 DO
			FlegRotB_FJntStart[i].data[j]:=jointPosLast[Mapping23[i],j];
		END_FOR
	END_FOR
ELSIF state=FlegRotB AND FlegRotBFinished=TRUE THEN	
	IsFlegRotB:=FALSE;
	IsCurlingFinished:=TRUE;
	state:=CurlingFinished;
	CurlingGaitFinished:=TRUE;
	quit_flag:=TRUE;
END_IF






]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrjPlanning" Id="{6442960d-f2b7-4248-8352-be5cc15dddb3}">
      <Declaration><![CDATA[METHOD PUBLIC TrjPlanning : BOOL
VAR_INPUT
END_VAR
VAR
	tr : LREAL;
	i, j : INT;
	Rb : Mat3;
	hip_pos_j : Vec3;
	leg_ref_pos_wrt_com_j : Vec3;
	tmp : Vec3;
	tip_pos, tip_vel : Vec3;
	
	body_ref_pos_start : Vec3;
	body_ref_pos_end : Vec3;
	jointTmpPosLast: ARRAY[0..2] OF LREAL;
	body_ref_ang_start: Vec3;
	leg_ref_pos_start: ARRAY [0..5] OF Vec3;
	leg_ref_pos_target: ARRAY [0..5] OF Vec3;
	body_ref_ang_end: Vec3;
	Rb_target2: Mat3;
	Rb_target1: Mat3;
	leg_ref_pos_end: ARRAY [0..5] OF Vec3;
	fbElipseInterpolation:ElipseInterpolation;
	fbHermitInterpolation:HermitInterpolation;
	holdPos: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[gait_cycle := gait_cycle + 1;

IF state=Ready THEN
	body_ref_pos := body_ref_pos_init;
	body_ref_ang := body_ref_ang_init;
	leg_ref_pos := leg_ref_pos_init;
	leg_ref_pos_wrt_hip := leg_ref_pos_init_wrt_hip;
ELSIF state=MlegRollC THEN	
	TrjPlanning_MlegRollC();
ELSIF state=AddHeight THEN	
	TrjPlanning_AddHeight();
ELSIF state=FlegRotB THEN	
	TrjPlanning_FlegRotB();
END_IF

// transform TO leg local frame AND DO inverse kinematics

FOR j := 0 TO 5 DO
	fbRotMat(
    	yaw := body_ref_ang.data[2], 
		pitch := body_ref_ang.data[1], 
		roll := body_ref_ang.data[0], 
		rm => Rb);
	hip_pos_j := SetVec3(hip_pos[j, 0], hip_pos[j, 1], hip_pos[j, 2]);

	//leg_ref_pos_wrt_com = Rb' * (leg_ref_pos - body_ref_pos)
	leg_ref_pos_wrt_com_j := MatMulVec(
		                         MatTranspose(Rb),
								 VecAdd(
									 leg_ref_pos[j],
									 VecNeg(body_ref_pos)
                                 )
                             );
	// leg_ref_pos_wrt_hip = Rleg' * (leg_ref_pos_wrt_com_j - hip_pos)
	leg_ref_pos_next_wrt_hip[j] := MatMulVec(
		                               MatTranspose(Rleg[j]),
									   VecAdd(
										   leg_ref_pos_wrt_com_j,
										   VecNeg(hip_pos_j)
									   )
								   );
								   
	leg_ref_vel_next_wrt_hip[j] := VecMulNum(VecAdd(leg_ref_pos_next_wrt_hip[j], VecNeg(leg_ref_pos_wrt_hip[j])), DINT_TO_LREAL(gvl.sampleRate));
END_FOR


// mapping to actual joints
FOR j := 0 TO 5 DO
	tmp := leg_ref_pos_next_wrt_hip[leg_index_mapping[j]-1];
	tip_pos := SetVec3(tmp.data[0], tmp.data[1], tmp.data[2]);
	tmp := leg_ref_vel_next_wrt_hip[leg_index_mapping[j]-1];
	tip_vel := SetVec3(tmp.data[0], tmp.data[1], tmp.data[2]);
	FOR i:= 0 TO 2 DO
		jointTmpPosLast[i]:=jointPosLast[j,i];
	END_FOR		
	gvl.legCtrl[j].InversePosAndVel(
		tipPos := tip_pos.data, 
		tipVel := tip_vel.data, 
		refPosLast:=jointTmpPosLast,
		legIndex:=j,
		jntPos => joint_ref_pos[j].data, 
		jntVel => joint_ref_vel[j].data);
	
END_FOR

// link to physical outputs
FOR i := 0 TO 5 DO
	FOR j := 0 TO 2 DO
		jointPosTarget[i, j] := joint_ref_pos[i].data[j];
		jointPosLast[i,j]:=jointPosTarget[i, j] ;
		jointVelTarget[i, j] := joint_ref_vel[i].data[j];
		jointFceTarget[i, j] := 0;
	END_FOR
END_FOR

// store refs for next loop
leg_ref_pos_wrt_hip := leg_ref_pos_next_wrt_hip;

IF gait_cycle > tTotalAll * gvl.sampleRate THEN
	quit_flag := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrjPlanning_AddHeight" Id="{457d4a14-353a-4dca-a264-0d1bbafce59a}">
      <Declaration><![CDATA[METHOD PUBLIC TrjPlanning_AddHeight : BOOL
VAR_INPUT
END_VAR
VAR
	tr: LREAL;
	i: INT;
	Rb_target1: Mat3;
	temp:vec3;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  AddHeightFinished=FALSE AND (gait_cycle-EnterAddHeightCount)<=AddHeightTime*gvl.sampleRate THEN
	body_ref_ang:=body_ref_ang_enter;
	leg_ref_pos:=leg_ref_pos_enter;
	tr  := UDINT_TO_LREAL(gait_cycle - EnterAddHeightCount) / gvl.sampleRate / AddHeightTime;
	fbGetPivot(tNow := tr, tTotal := 1.0, pivot => pvt);
	FOR i:=0 TO 2 DO
		body_ref_pos.data[i]:=(1-pvt)*body_ref_pos_enter.data[i]+pvt*body_target_pos.data[i];
	END_FOR
	
	FOR i:=0 TO 1 DO
		gvl.legCtrl[Mapping23[i]].ForwardKinetics(motorAngles:=AddHeight_FJntStart[i].data , legIndex:=Mapping23[i] , tipPosition=>AddHeight_FPosWrtHip[i].data );
		fbRotMat(yaw := body_ref_ang_enter.data[2], pitch := body_ref_ang_enter.data[1],roll := body_ref_ang_enter.data[0], rm => Rb_target1 );
		temp.data[0]:=hip_pos[Mapping23[i],0];temp.data[1]:=hip_pos[Mapping23[i],1];temp.data[2]:=hip_pos[Mapping23[i],2];
		leg_ref_pos[Mapping23[i]]:= VecAdd( MatMulVec(Rb_target1, VecAdd(temp,MatMulVec(Rleg[Mapping23[i]],AddHeight_FPosWrtHip[i]))),body_ref_pos);
	END_FOR
ELSE
	AddHeightFinished:=TRUE;	
	RequireFlegRotB:=TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrjPlanning_FlegRotB" Id="{87ca680f-3ea0-4353-997a-df082460ad12}">
      <Declaration><![CDATA[METHOD PUBLIC TrjPlanning_FlegRotB : BOOL
VAR_INPUT
END_VAR
VAR
	FlegRotB_FJntState1:ARRAY[0..1,0..2] OF LREAL:=[0*pi/180,162*pi/180,172*pi/180,
                                                    0*pi/180,162*pi/180,172*pi/180];	//side rotates to horizon	
	FlegRotB_FJntState2:ARRAY[0..1,0..2] OF LREAL:=[0*pi/180,162*pi/180,81.588*pi/180,
                                                    0*pi/180,162*pi/180,81.588*pi/180];	;	//shank rotates to rc position
	(*FlegRotB_FJntState3:ARRAY[0..1,0..2] OF LREAL:=[0*pi/180,187.8384*pi/180,81.588*pi/180,
                                                    0*pi/180,187.8384*pi/180,81.588*pi/180];	//thigh rotates to RC position	[-0.3,-0.3209,-0.1246]*)
	FlegRotB_FJntState3:ARRAY[0..1,0..2] OF LREAL:=[0*pi/180,222.0252*pi/180,(254.0072-222.0252)*pi/180,
                                                    0*pi/180,222.0252*pi/180,(254.0072-222.0252)*pi/180];	//thigh rotates to RC position	[-0.3,-0.3209,-0.1246]

																								 									 
	State1Time:LREAL:=2;
	State2Time:LREAL:=2;
	State3Time:LREAL:=2;
	State4Time:LREAL:=2;													 
													 
	tr: lreal;
	i: INT;
	j: INT;
	Rb_target1: Mat3;
	temp: vec3;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF FlegRotBFinished=FALSE THEN
	IF(gait_cycle-EnterFlegRotBCount)<=State1Time*gvl.sampleRate THEN
		body_ref_pos:=body_ref_pos_enter;
		body_ref_ang:=body_ref_ang_enter;
		leg_ref_pos:=leg_ref_pos_enter;	
		
		tr  := UDINT_TO_LREAL(gait_cycle - EnterFlegRotBCount) / gvl.sampleRate / State1Time;
		fbGetPivot(tNow := tr, tTotal := 1.0, pivot => pvt);	
		FOR i:=0 TO 1 DO
			FOR j:=0 TO 2 DO
				FlegRotB_FJntRef[i].data[j]:=(1-pvt)*FlegRotB_FJntStart[i].data[j]+pvt*(FlegRotB_FJntState1[i,j]);
			END_FOR
			gvl.legCtrl[Mapping23[i]].ForwardKinetics(motorAngles:=FlegRotB_FJntRef[i].data , legIndex:=Mapping23[i] , tipPosition=>FlegRotB_FPosWrtHip[i].data );
			fbRotMat(yaw := body_ref_ang_enter.data[2], pitch := body_ref_ang_enter.data[1],roll := body_ref_ang_enter.data[0], rm =>  Rb_target1 );
			temp.data[0]:=hip_pos[Mapping23[i],0];temp.data[1]:=hip_pos[Mapping23[i],1];temp.data[2]:=hip_pos[Mapping23[i],2];
			leg_ref_pos[Mapping23[i]]:= VecAdd( MatMulVec(Rb_target1, VecAdd(temp,MatMulVec(Rleg[Mapping23[i]],FlegRotB_FPosWrtHip[i]))),body_ref_pos);	
		END_FOR
		
	ELSIF (gait_cycle-EnterFlegRotBCount)<=(State1Time+State2Time)*gvl.sampleRate THEN
		body_ref_pos:=body_ref_pos_enter;
		body_ref_ang:=body_ref_ang_enter;
		leg_ref_pos:=leg_ref_pos_enter;	
		
		tr  := (UDINT_TO_LREAL(gait_cycle - EnterFlegRotBCount) / gvl.sampleRate-State1Time) / State2Time;
		fbGetPivot(tNow := tr, tTotal := 1.0, pivot => pvt);	
		FOR i:=0 TO 1 DO
			FOR j:=0 TO 2 DO
				FlegRotB_FJntRef[i].data[j]:=(1-pvt)*FlegRotB_FJntState1[i,j]+pvt*(FlegRotB_FJntState2[i,j]);
			END_FOR
			gvl.legCtrl[Mapping23[i]].ForwardKinetics(motorAngles:=FlegRotB_FJntRef[i].data , legIndex:=Mapping23[i] , tipPosition=>FlegRotB_FPosWrtHip[i].data );
			fbRotMat(yaw := body_ref_ang_enter.data[2], pitch := body_ref_ang_enter.data[1],roll := body_ref_ang_enter.data[0], rm =>  Rb_target1 );
			temp.data[0]:=hip_pos[Mapping23[i],0];temp.data[1]:=hip_pos[Mapping23[i],1];temp.data[2]:=hip_pos[Mapping23[i],2];
			leg_ref_pos[Mapping23[i]]:= VecAdd( MatMulVec(Rb_target1, VecAdd(temp,MatMulVec(Rleg[Mapping23[i]],FlegRotB_FPosWrtHip[i]))),body_ref_pos);	
		END_FOR	
	ELSIF	(gait_cycle-EnterFlegRotBCount)<=(State1Time+State2Time+State3Time)*gvl.sampleRate THEN
		body_ref_pos:=body_ref_pos_enter;
		body_ref_ang:=body_ref_ang_enter;
		leg_ref_pos:=leg_ref_pos_enter;	
		tr  := (UDINT_TO_LREAL(gait_cycle - EnterFlegRotBCount) / gvl.sampleRate-State1Time-State2Time) / State3Time;
		fbGetPivot(tNow := tr, tTotal := 1.0, pivot => pvt);		
		FOR i:=0 TO 1 DO
			FOR j:=0 TO 2 DO
				FlegRotB_FJntRef[i].data[j]:=(1-pvt)*FlegRotB_FJntState2[i,j]+pvt*(FlegRotB_FJntState3[i,j]);
			END_FOR
			gvl.legCtrl[Mapping23[i]].ForwardKinetics(motorAngles:=FlegRotB_FJntRef[i].data , legIndex:=Mapping23[i] , tipPosition=>FlegRotB_FPosWrtHip[i].data );
			fbRotMat(yaw := body_ref_ang_enter.data[2], pitch := body_ref_ang_enter.data[1],roll := body_ref_ang_enter.data[0], rm =>  Rb_target1 );
			temp.data[0]:=hip_pos[Mapping23[i],0];temp.data[1]:=hip_pos[Mapping23[i],1];temp.data[2]:=hip_pos[Mapping23[i],2];
			leg_ref_pos[Mapping23[i]]:= VecAdd( MatMulVec(Rb_target1, VecAdd(temp,MatMulVec(Rleg[Mapping23[i]],FlegRotB_FPosWrtHip[i]))),body_ref_pos);	
		END_FOR			
	ELSE		
		FlegRotBFinished:=TRUE;
		quit_flag:=true;
	END_IF
END_IF


(*IF FlegRotBFinished=FALSE AND (gait_cycle-EnterFlegRotBCount)<=FlegRotBTime*gvl.sampleRate THEN
	body_ref_pos:=body_ref_pos_enter;
	body_ref_ang:=body_ref_ang_enter;
	leg_ref_pos:=leg_ref_pos_enter;
	
	tr  := UDINT_TO_LREAL(gait_cycle - EnterFlegRotBCount) / gvl.sampleRate / FlegRotBTime;
	fbGetPivot(tNow := tr, tTotal := 1.0, pivot => pvt);
	FOR i:=0 TO 1 DO
		FOR j:=0 TO 2 DO
			FlegRotB_FJntRef[i].data[j]:=(1-pvt)*FlegRotB_FJntStart[i].data[j]+pvt*(FlegRotB_FJntTarget[i,j]);
		END_FOR
		gvl.legCtrl[Mapping23[i]].ForwardKinetics(motorAngles:=FlegRotB_FJntRef[i].data , legIndex:=Mapping23[i] , tipPosition=>FlegRotB_FPosWrtHip[i].data );
		fbRotMat(yaw := body_ref_ang_enter.data[2], pitch := body_ref_ang_enter.data[1],roll := body_ref_ang_enter.data[0], rm =>  Rb_target1 );
		temp.data[0]:=hip_pos[Mapping23[i],0];temp.data[1]:=hip_pos[Mapping23[i],1];temp.data[2]:=hip_pos[Mapping23[i],2];
		leg_ref_pos[Mapping23[i]]:= VecAdd( MatMulVec(Rb_target1, VecAdd(temp,MatMulVec(Rleg[Mapping23[i]],FlegRotB_FPosWrtHip[i]))),body_ref_pos);
	END_FOR
ELSE	
	FlegRotBFinished:=TRUE;
END_IF	*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrjPlanning_MlegRollC" Id="{9253f22d-5e16-4fd4-b86a-bb7455646eb2}">
      <Declaration><![CDATA[METHOD PUBLIC TrjPlanning_MlegRollC : BOOL
VAR_INPUT
END_VAR
VAR
	MlegRollC_MPosTarget:ARRAY[0..1,0..2] OF LREAL:=[-0.2,-0.1797,-0.1246,
                                                     -0.2,-0.1797,0.1246];
	MlegRollC_MJntTargetRef:ARRAY[0..1,0..2] OF LREAL:=[0,523.2736*pi/180,-235.1052*pi/180,
                                                     0,523.2736*pi/180,-235.1052*pi/180];
	tr: lreal;
	i: INT;
	j: INT;
	Rb_target1: Mat3;
	temp: vec3;
	tempLeg:ARRAY [0..2] OF LREAL;
	tempJnt:ARRAY [0..2] OF LREAL;
	tempRef:ARRAY [0..2] OF LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (gait_cycle-EnterMlegRollCCount)=1 THEN
	FOR i:=0 TO 1 DO
		tempLeg[0]:=MlegRollC_MPosTarget[i,0];tempLeg[1]:=MlegRollC_MPosTarget[i,1];tempLeg[2]:=MlegRollC_MPosTarget[i,2];
		tempRef[0]:=MlegRollC_MJntTargetRef[i,0];tempRef[1]:=MlegRollC_MJntTargetRef[i,1];tempRef[2]:=MlegRollC_MJntTargetRef[i,2];
		GVL.legCtrl[Mapping14[i]].InverseKinetics(tipPosition:=tempLeg , refPosLast:=tempRef , legIndex:=Mapping14[i] , motorAngles=>tempJnt , isSingular=> );
		MlegRollC_MJntTarget[i,0]:=tempJnt[0];MlegRollC_MJntTarget[i,1]:=tempJnt[1];MlegRollC_MJntTarget[i,2]:=tempJnt[2];		
	END_FOR
END_IF

IF MlegRollCFinished=FALSE AND (gait_cycle-EnterMlegRollCCount)<=MlegRollCTime*gvl.sampleRate THEN
	body_ref_pos:=body_ref_pos_enter;
	body_ref_ang:=body_ref_ang_enter;
	leg_ref_pos:=leg_ref_pos_enter;
	
	tr  := UDINT_TO_LREAL(gait_cycle - EnterMlegRollCCount) / gvl.sampleRate / MlegRollCTime;
	fbGetPivot(tNow := tr, tTotal := 1.0, pivot => pvt);
	FOR i:=0 TO 1 DO
		FOR j:=0 TO 2 DO
			MlegRollC_MJntRef[i].data[j]:=(1-pvt)*MlegRollC_MJntStart[i].data[j]+pvt*(MlegRollC_MJntTarget[i,j]);
		END_FOR
		gvl.legCtrl[Mapping14[i]].ForwardKinetics(motorAngles:=MlegRollC_MJntRef[i].data , legIndex:=Mapping14[i] , tipPosition=>MlegRollC_MPosWrtHip[i].data );
		fbRotMat(yaw := body_ref_ang_enter.data[2], pitch := body_ref_ang_enter.data[1],roll := body_ref_ang_enter.data[0], rm =>  Rb_target1 );
		temp.data[0]:=hip_pos[Mapping14[i],0];temp.data[1]:=hip_pos[Mapping14[i],1];temp.data[2]:=hip_pos[Mapping14[i],2];
		leg_ref_pos[Mapping14[i]]:= VecAdd( MatMulVec(Rb_target1, VecAdd(temp,MatMulVec(Rleg[Mapping14[i]],MlegRollC_MPosWrtHip[i]))),body_ref_pos);
	END_FOR	
ELSE	
	MlegRollCFinished:=TRUE;
	RequireAddHeight:=true;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RcToStanceFromSlip">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="RcToStanceFromSlip.DoPlanning">
      <LineId Id="45" Count="3" />
      <LineId Id="50" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="51" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RcToStanceFromSlip.Initialize">
      <LineId Id="123" Count="4" />
      <LineId Id="8" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="258" Count="12" />
      <LineId Id="272" Count="1" />
      <LineId Id="243" Count="0" />
      <LineId Id="275" Count="16" />
      <LineId Id="274" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="319" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="28" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="30" Count="21" />
      <LineId Id="88" Count="3" />
      <LineId Id="87" Count="0" />
      <LineId Id="64" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RcToStanceFromSlip.StateMachine">
      <LineId Id="162" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="293" Count="1" />
      <LineId Id="219" Count="3" />
      <LineId Id="217" Count="0" />
      <LineId Id="224" Count="3" />
      <LineId Id="223" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="230" Count="1" />
      <LineId Id="295" Count="1" />
      <LineId Id="232" Count="2" />
      <LineId Id="229" Count="0" />
      <LineId Id="235" Count="7" />
      <LineId Id="244" Count="0" />
      <LineId Id="297" Count="1" />
      <LineId Id="245" Count="3" />
      <LineId Id="243" Count="0" />
      <LineId Id="250" Count="3" />
      <LineId Id="249" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="299" Count="1" />
      <LineId Id="216" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="55" Count="5" />
      <LineId Id="54" Count="0" />
    </LineIds>
    <LineIds Name="RcToStanceFromSlip.TrjPlanning">
      <LineId Id="6" Count="0" />
      <LineId Id="133" Count="4" />
      <LineId Id="7" Count="0" />
      <LineId Id="125" Count="5" />
      <LineId Id="34" Count="67" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RcToStanceFromSlip.TrjPlanning_AddHeight">
      <LineId Id="14" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="3" />
      <LineId Id="16" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="4" />
      <LineId Id="22" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="RcToStanceFromSlip.TrjPlanning_FlegRotB">
      <LineId Id="71" Count="50" />
      <LineId Id="148" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="68" Count="2" />
      <LineId Id="18" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="21" Count="2" />
      <LineId Id="25" Count="2" />
      <LineId Id="24" Count="0" />
      <LineId Id="28" Count="3" />
      <LineId Id="33" Count="2" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="RcToStanceFromSlip.TrjPlanning_MlegRollC">
      <LineId Id="64" Count="6" />
      <LineId Id="61" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="26" Count="7" />
      <LineId Id="25" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>